Upgrade to webgl 2?

Make a background service worker


How do I write this painting app without creating a spider web?

Things to consider
	probably use a web worker
	definitely async await
	possibly streaming
		input to output is kinda like a pipeline
		mouse input -> interpolation -> vertex data -> render
	using es6 imports/exports
		add rollup to the toolchain?
	just making an api; no UI
	
	how do you render the canvas map? and the color selector?
		sharing textures between contexts is not possible.
		can grab raw canvas data and downscale it
		implement a method to get a resized version of the canvas
			GetCanvasData(resolution: Vec2)
			render to webgl texture with size of resolution, then return texture's pixel data
		color selector can be made using css.
	
	input should be its own module. input is a way of communicating with the api.
		maybe the user wants to define their input handling
		
	events should be subscribed to internally, but they should never be sent. only the external UI code is allowed to send events
	
	settings should be settable in select few places in the code base. it should also be exposed for the ui through the main context (the main context wont be passed around internally)
	
	project structure
	
	-build
		(build instructions)
	-dist
		app.js (rolled up js)
		-js
			(compiled src)
	-src
		-engine
			-rendering
			-core
			-vertex data worker
		-brushes
			-default
			-erase
			-
		-ui 
			(uses the engine and brushes)
			
	building the project
	use typescript compiler to compile files on change
		target should be es5
		moduling system should be es2015
	rollup.js watches the compiled js files, and when changes are detected, it rebundles the main file.
	liteserver watches the bundle, html, and css, and when changes are detected, it 4