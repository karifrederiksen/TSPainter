import * as Events from "./Engine/Global/Events";
import * as Settings from "./Engine/Global/Settings";
import { Vec2 } from "./Engine/Math/Vec";
import { Hsv } from "./Engine/Math/Color";
import { clamp } from "./Engine/Math/Utils";
export class SliderElement {
    constructor(sliderId, text, args) {
        const inputElem = this.input = document.getElementById(sliderId);
        const textElem = this._text = document.getElementById(sliderId + "Text");
        this._value = document.getElementById(sliderId + "Value");
        this.precision = args.precision ? args.precision : 2;
        inputElem.type = "range";
        inputElem.min = args.min ? args.min.toString() : "0";
        inputElem.max = args.max ? args.max.toString() : "1";
        inputElem.step = args.step ? args.step.toString() : "0.01";
        inputElem.value = args.value ? args.value.toString() : "";
        textElem.innerHTML = text;
    }
    get value() { return parseFloat(this.input.value); }
    set value(val) {
        this.input.value = val.toString();
        this._value.innerHTML = val.toFixed(this.precision);
    }
}
export class SliderDoubleBinding {
    constructor(slider, eventId, settingsId) {
        this.onSettingsChange = (val) => {
            this.slider.value = val;
        };
        this.onUInput = () => {
            const value = this.slider.value;
            Events.broadcast(this.eventId, value);
        };
        this.slider = slider;
        this.eventId = eventId;
        this.settingsId = settingsId;
        slider.value = Settings.getValue(settingsId);
        slider.input.addEventListener("input", this.onUInput);
        Settings.subscribe(settingsId, this.onSettingsChange);
    }
}
class ColorAreaPicker {
    constructor(id) {
        this.element = document.getElementById(id);
    }
    setColor(rgb, position) {
        console.assert(rgb != null);
        this.element.style.left = `${(position.x - 5)}px`;
        this.element.style.top = `${(position.y - 5)}px`;
        const gray = rgb.toGray();
        const borderColor = gray > .5 ? 0 : 255;
        this.element.style.borderColor = `rgb(${borderColor}, ${borderColor}, ${borderColor})`;
    }
}
class ColorAreaDoubleBinding {
    constructor(elementId, pickerId) {
        this.isPointerDown = false;
        this.pointerdown = (ev) => {
            this.isPointerDown = true;
            this.pointermove(ev);
        };
        this.pointerup = () => {
            this.isPointerDown = false;
        };
        this.pointermove = (ev) => {
            if (this.isPointerDown === false) {
                return;
            }
            const bounds = this.element.getBoundingClientRect();
            const x = ev.x - bounds.left;
            const y = ev.y - bounds.top;
            let xpct = x / this.element.clientWidth;
            let ypct = 1 - (y / this.element.clientHeight);
            xpct = clamp(xpct, 0, 1);
            ypct = clamp(ypct, 0, 1);
            Events.broadcast(Events.ID.BrushSaturation, xpct);
            Events.broadcast(Events.ID.BrushValue, ypct);
        };
        console.assert(elementId != null);
        console.assert(elementId !== "");
        console.assert(pickerId != null);
        console.assert(pickerId !== "");
        this.element = document.getElementById(elementId);
        this.pickerElement = new ColorAreaPicker(pickerId);
        this.element.addEventListener("pointerdown", this.pointerdown);
        document.body.addEventListener("pointerup", this.pointerup);
        document.body.addEventListener("pointermove", this.pointermove);
    }
    updateColor(colorHsv) {
        console.assert(colorHsv != null);
        const width = this.element.clientWidth;
        const height = this.element.clientHeight;
        const rgb = colorHsv.toRgb();
        const pickerPos = Vec2.create(Math.round(colorHsv.s * width), Math.round((1 - colorHsv.v) * height));
        this.pickerElement.setColor(rgb, pickerPos);
        const bgColor = Hsv.create(colorHsv.h, 1, 1)
            .toRgb()
            .multiplyScalar(255)
            .round();
        const colorStyle = `rgb(${bgColor.r}, ${bgColor.g}, ${bgColor.b})`;
        this.element.style.backgroundColor = colorStyle;
    }
}
class HueAreaSlider {
    constructor(elementId, sliderId) {
        this.isPointerDown = false;
        this.pointerup = () => {
            this.isPointerDown = false;
        };
        this.pointerdown = (ev) => {
            this.isPointerDown = true;
            this.pointermove(ev);
        };
        this.pointermove = (ev) => {
            if (this.isPointerDown === false) {
                return;
            }
            const bounds = this.element.getBoundingClientRect();
            const x = ev.x - bounds.left;
            let xpct = x / this.element.clientWidth;
            xpct = clamp(xpct, 0, 1);
            Events.broadcast(Events.ID.BrushHue, xpct);
        };
        console.assert(elementId != null);
        console.assert(elementId !== "");
        console.assert(sliderId != null);
        console.assert(sliderId !== "");
        this.element = document.getElementById(elementId);
        this.sliderElement = document.getElementById(sliderId);
        this.element.addEventListener("pointerdown", this.pointerdown);
        document.body.addEventListener("pointerup", this.pointerup);
        document.body.addEventListener("pointermove", this.pointermove);
    }
    setHue(hue) {
        const width = this.element.clientWidth;
        const x = Math.round(hue * width) - 1;
        this.sliderElement.style.left = `${x}px`;
    }
}
class ColorDisplay {
    constructor(primaryId, secondaryId) {
        console.assert(primaryId != null);
        console.assert(primaryId !== "");
        console.assert(secondaryId != null);
        console.assert(secondaryId !== "");
        this.primaryElem = document.getElementById(primaryId);
        this.secondaryElem = document.getElementById(secondaryId);
    }
    updateColor(rgb) {
        console.assert(rgb != null);
        this.primaryElem.style.backgroundColor = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
    }
    swapColors() {
        const tmp = this.primaryElem.style.backgroundColor;
        this.primaryElem.style.backgroundColor = this.secondaryElem.style.backgroundColor;
        this.secondaryElem.style.backgroundColor = tmp;
    }
}
export class ColorSelectionArea {
    constructor() {
        this.secondaryColor = Hsv.create(0, 0, 1);
        this.getColorRgb = () => this.color
            .toRgb()
            .multiplyScalar(255)
            .round();
        this.handleHue = (value) => {
            console.assert(value >= 0);
            console.assert(value <= 1);
            this.color = this.color.withH(value);
            this.satValArea.updateColor(this.color);
            this.hueSlider.setHue(value);
            this.colorDisplay.updateColor(this.getColorRgb());
        };
        this.handleSaturation = (value) => {
            console.assert(value >= 0);
            console.assert(value <= 1);
            this.color = this.color.withS(value);
            this.satValArea.updateColor(this.color);
            this.colorDisplay.updateColor(this.getColorRgb());
        };
        this.handleValue = (value) => {
            console.assert(value >= 0);
            console.assert(value <= 1);
            this.color = this.color.withV(value);
            this.satValArea.updateColor(this.color);
            this.colorDisplay.updateColor(this.getColorRgb());
        };
        this.satValArea = new ColorAreaDoubleBinding("pickingArea", "picker");
        this.hueSlider = new HueAreaSlider("hueArea", "hueAreaSlider");
        this.colorDisplay = new ColorDisplay("colorDisplayPrimary", "colorDisplaySecondary");
        this.colorDisplay.secondaryElem.addEventListener("pointerdown", () => {
            const tmp = this.color;
            this.color = this.secondaryColor;
            this.secondaryColor = tmp;
            this.colorDisplay.swapColors();
            Events.broadcast(Events.ID.BrushHue, this.color.h);
            Events.broadcast(Events.ID.BrushSaturation, this.color.s);
            Events.broadcast(Events.ID.BrushValue, this.color.v);
        });
        this.color = Hsv.create(Settings.getValue(Settings.ID.BrushHue), Settings.getValue(Settings.ID.BrushSaturation), Settings.getValue(Settings.ID.BrushValue));
        this.satValArea.updateColor(this.color);
        this.hueSlider.setHue(this.color.h);
        this.colorDisplay.updateColor(this.getColorRgb());
        Events.subscribe(Events.ID.BrushHue, this.handleHue);
        Events.subscribe(Events.ID.BrushSaturation, this.handleSaturation);
        Events.subscribe(Events.ID.BrushValue, this.handleValue);
    }
}
//# sourceMappingURL=data:application/json;base64,