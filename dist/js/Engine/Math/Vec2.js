export class Vec2 {
    constructor(_x = 0.0, _y = 0.0) {
        this._x = _x;
        this._y = _y;
        Object.freeze(this);
    }
    get x() { return this._x; }
    get y() { return this._y; }
    default() {
        return Vec2.default;
    }
    isDefault() {
        return this === Vec2.default;
    }
    withX(n) {
        return Vec2.create(n, this._y);
    }
    withY(n) {
        return Vec2.create(this._x, n);
    }
    add(rhs) {
        return Vec2.create(this._x + rhs._x, this._y + rhs._y);
    }
    subtract(rhs) {
        return Vec2.create(this._x - rhs._x, this._y - rhs._y);
    }
    multiply(rhs) {
        return Vec2.create(this._x * rhs._x, this._y * rhs._y);
    }
    divide(rhs) {
        return Vec2.create(this._x / rhs._x, this._y / rhs._y);
    }
    addScalar(n) {
        return Vec2.create(this._x + n, this._y + n);
    }
    subtractScalar(n) {
        return Vec2.create(this._x - n, this._y - n);
    }
    multiplyScalar(n) {
        return Vec2.create(this._x * n, this._y * n);
    }
    divideScalar(n) {
        return Vec2.create(this._x / n, this._y / n);
    }
    powScalar(n) {
        return Vec2.create(Math.pow(this._x, n), Math.pow(this._y, n));
    }
    equal(rhs) {
        return this._x === rhs._x
            && this._y === rhs._y;
    }
    static distance(from, to) {
        return Math.sqrt(Math.pow((to._x - from._x), 2) + Math.pow((to._y - from._y), 2));
    }
    static angle(from, to) {
        return Math.atan2(to._y - from._y, to._x - from._y);
    }
    static dot(lhs, rhs) {
        return lhs._x * rhs._x + lhs._y * rhs._y;
    }
}
Vec2.default = new Vec2(0, 0);
Vec2.create = (x = 0, y = 0) => {
    if (x === 0 && y === 0) {
        return Vec2.default;
    }
    return new Vec2(x, y);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmVjMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9FbmdpbmUvTWF0aC9WZWMyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU07SUFHTCxZQUNTLEtBQUssR0FBRyxFQUNSLEtBQUssR0FBRztRQURSLE9BQUUsR0FBRixFQUFFLENBQU07UUFDUixPQUFFLEdBQUYsRUFBRSxDQUFNO1FBRWhCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsQyxJQUFXLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFTM0IsT0FBTztRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3JCLENBQUM7SUFDTSxTQUFTO1FBQ2YsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzlCLENBQUM7SUFFTSxLQUFLLENBQUMsQ0FBUztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFDTSxLQUFLLENBQUMsQ0FBUztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBUztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxFQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQ2YsQ0FBQztJQUNKLENBQUM7SUFDTSxRQUFRLENBQUMsR0FBUztRQUN4QixNQUFNLENB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