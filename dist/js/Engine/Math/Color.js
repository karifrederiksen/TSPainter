export class Hsv {
    constructor(_h, _s, _v) {
        this._h = _h;
        this._s = _s;
        this._v = _v;
        Object.freeze(this);
    }
    get h() { return this._h; }
    get s() { return this._s; }
    get v() { return this._v; }
    static create(h, s, v) {
        if ([h, s, v].every(x => x === 0)) {
            return Hsv.default;
        }
        return new Hsv(h, s, v);
    }
    default() {
        return Hsv.default;
    }
    isDefault() {
        return this === Hsv.default;
    }
    withH(n) {
        return Hsv.create(n, this._s, this._v);
    }
    withS(n) {
        return Hsv.create(this._h, n, this._v);
    }
    withV(n) {
        return Hsv.create(this._h, this._s, n);
    }
    add(rhs) {
        return Hsv.create(this._h + rhs._h, this._s + rhs._s, this._v + rhs._v);
    }
    subtract(rhs) {
        return Hsv.create(this._h - rhs._h, this._s - rhs._s, this._v - rhs._v);
    }
    multiply(rhs) {
        return Hsv.create(this._h * rhs._h, this._s * rhs._s, this._v * rhs._v);
    }
    divide(rhs) {
        return Hsv.create(this._h / rhs._h, this._s / rhs._s, this._v / rhs._v);
    }
    addScalar(n) {
        return Hsv.create(this._h + n, this._s + n, this._v + n);
    }
    subtractScalar(n) {
        return Hsv.create(this._h - n, this._s - n, this._v - n);
    }
    multiplyScalar(n) {
        return Hsv.create(this._h * n, this._s * n, this._v * n);
    }
    divideScalar(n) {
        return Hsv.create(this._h / n, this._s / n, this._v / n);
    }
    powScalar(n) {
        return Hsv.create(Math.pow(this._h, n), Math.pow(this._s, n), Math.pow(this._v, n));
    }
    pow(n) {
        return Hsv.create(Math.pow(this._h, n), Math.pow(this._s, n), Math.pow(this._v, n));
    }
    toRgb() {
        const h = this._h;
        const s = this._s;
        const v = this._v;
        const i = Math.floor(h * 6);
        const f = h * 6 - i;
        const p = v * (1 - s);
        const q = v * (1 - f * s);
        const t = v * (1 - (1 - f) * s);
        let r;
        let g;
        let b;
        switch (i % 6) {
            case 0:
                r = v, g = t, b = p;
                break;
            case 1:
                r = q, g = v, b = p;
                break;
            case 2:
                r = p, g = v, b = t;
                break;
            case 3:
                r = p, g = q, b = v;
                break;
            case 4:
                r = t, g = p, b = v;
                break;
            default:
                r = v, g = p, b = q;
                break;
        }
        return Rgb.create(r, g, b);
    }
    toHsv() { return this; }
    toHex() { return this.toRgb().toHex(); }
    toGray() { return this.toRgb().toGray(); }
}
Hsv.default = new Hsv(0, 0, 0);
export class Rgb {
    constructor(_r, _g, _b) {
        this._r = _r;
        this._g = _g;
        this._b = _b;
        Object.freeze(this);
    }
    get r() { return this._r; }
    get g() { return this._g; }
    get b() { return this._b; }
    static create(r, g, b) {
        if ([r, g, b].every(x => x === 0)) {
            return Rgb.default;
        }
        return new Rgb(r, g, b);
    }
    default() {
        return Rgb.default;
    }
    isDefault() {
        return this === Rgb.default;
    }
    withR(n) {
        return Rgb.create(n, this._g, this._b);
    }
    withG(n) {
        return Rgb.create(this._r, n, this._b);
    }
    withB(n) {
        return Rgb.create(this._r, this._g, n);
    }
    add(rhs) {
        return Rgb.create(this._r + rhs._r, this._g + rhs._g, this._b + rhs._b);
    }
    subtract(rhs) {
        return Rgb.create(this._r - rhs._r, this._g - rhs._g, this._b - rhs._b);
    }
    multiply(rhs) {
        return Rgb.create(this._r * rhs._r, this._g * rhs._g, this._b * rhs._b);
    }
    divide(rhs) {
        return Rgb.create(this._r / rhs._r, this._g / rhs._g, this._b / rhs._b);
    }
    addScalar(n) {
        return Rgb.create(this._r + n, this._g + n, this._b + n);
    }
    subtractScalar(n) {
        return Rgb.create(this._r - n, this._g - n, this._b - n);
    }
    multiplyScalar(n) {
        return Rgb.create(this._r * n, this._g * n, this._b * n);
    }
    divideScalar(n) {
        return Rgb.create(this._r / n, this._g / n, this._b / n);
    }
    powScalar(n) {
        return Rgb.create(Math.pow(this._r, n), Math.pow(this._g, n), Math.pow(this._b, n));
    }
    round() {
        return Rgb.create((this._r + .5) | 0, (this._g + .5) | 0, (this._b + .5) | 0);
    }
    toRgb() { return this; }
    toHsv() {
        const r = this._r;
        const g = this._g;
        const b = this._b;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        const d = max - min;
        const s = (max === 0 ? 0 : d / max);
        const v = max;
        let h;
        switch (max) {
            case min:
                h = 0;
                break;
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            default:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
        return Hsv.create(h, s, v);
    }
    toHex() {
        return (((this._r * 255) | 0) << 16)
            + (((this._g * 255) | 0) << 8)
            + ((this._b * 255) | 0);
    }
    toGray() {
        const r = this._r;
        const g = this._g;
        const b = this._b;
        return Math.sqrt(.299 * r * r +
            .587 * g * g +
            .114 * b * b);
    }
}
Rgb.default = new Rgb(0, 0, 0);
export class Hsva {
    constructor(_hsv, _a) {
        this._hsv = _hsv;
        this._a = _a;
        this.toRgba = () => Rgba.createWithRgb(this._hsv.toRgb(), this._a);
        this.toHsva = () => this;
        this.toHex = () => this.toRgba().toHex();
        Object.freeze(this);
    }
    get hsv() { return this._hsv; }
    get h() { return this._hsv.h; }
    get s() { return this._hsv.s; }
    get v() { return this._hsv.v; }
    get a() { return this._a; }
    static create(h, s, v, a) {
        if ([h, s, v, a].every(x => x === 0)) {
            return Hsva.default;
        }
        return new Hsva(Hsv.create(h, s, v), a);
    }
    static createWithHsv(hsv, a) {
        if (hsv === Hsva.default.hsv && a === 0) {
            return Hsva.default;
        }
        return new Hsva(hsv, a);
    }
    default() {
        return Hsva.default;
    }
    isDefault() {
        return this === Hsva.default;
    }
    withH(n) {
        return Hsva.createWithHsv(this._hsv.withH(n), this._a);
    }
    withS(n) {
        return Hsva.createWithHsv(this._hsv.withS(n), this._a);
    }
    withV(n) {
        return Hsva.createWithHsv(this._hsv.withV(n), this._a);
    }
    WithA(n) {
        return Hsva.createWithHsv(this._hsv, n);
    }
    add(rhs) {
        return Hsva.createWithHsv(this._hsv.add(rhs._hsv), this._a + rhs._a);
    }
    subtract(rhs) {
        return Hsva.createWithHsv(this._hsv.subtract(rhs._hsv), this._a - rhs._a);
    }
    multiply(rhs) {
        return Hsva.createWithHsv(this._hsv.multiply(rhs._hsv), this._a * rhs._a);
    }
    divide(rhs) {
        return Hsva.createWithHsv(this._hsv.divide(rhs._hsv), this._a / rhs._a);
    }
    addScalar(n) {
        return Hsva.createWithHsv(this._hsv.addScalar(n), this._a + n);
    }
    subtractScalar(n) {
        return Hsva.createWithHsv(this._hsv.subtractScalar(n), this._a - n);
    }
    multiplyScalar(n) {
        return Hsva.createWithHsv(this._hsv.multiplyScalar(n), this._a * n);
    }
    divideScalar(n) {
        return Hsva.createWithHsv(this._hsv.divideScalar(n), this._a / n);
    }
    powScalar(n) {
        return Hsva.createWithHsv(this._hsv.powScalar(n), Math.pow(this._a, n));
    }
}
Hsva.default = new Hsva(Hsv.create(0, 0, 0), 0);
export class Rgba {
    constructor(_rgb, _a) {
        this._rgb = _rgb;
        this._a = _a;
        Object.freeze(this);
    }
    get rgb() { return this._rgb; }
    get r() { return this._rgb.r; }
    get g() { return this._rgb.g; }
    get b() { return this._rgb.b; }
    get a() { return this._a; }
    static create(r, g, b, a) {
        if ([r, g, b, a].every(x => x === 0)) {
            return Rgba.default;
        }
        return new Rgba(Rgb.create(r, g, b), a);
    }
    static createWithRgb(rgb, a) {
        if (rgb === Rgba.default.rgb && a === 0) {
            return Rgba.default;
        }
        return new Rgba(rgb, a);
    }
    default() {
        return Rgba.default;
    }
    isDefault() {
        return this === Rgba.default;
    }
    withR(n) {
        return Rgba.createWithRgb(this._rgb.withR(n), this._a);
    }
    withG(n) {
        return Rgba.createWithRgb(this._rgb.withG(n), this._a);
    }
    withB(n) {
        return Rgba.createWithRgb(this._rgb.withB(n), this._a);
    }
    WithA(n) {
        return Rgba.createWithRgb(this._rgb, n);
    }
    toRgba() {
        return this;
    }
    toHsva() {
        return Hsva.createWithHsv(this._rgb.toHsv(), this._a);
    }
    toHex() {
        return (this._rgb.toHex() << 8)
            + ((this._a + .5) | 0);
    }
    add(rhs) {
        return Rgba.createWithRgb(this._rgb.add(rhs._rgb), this._a + rhs._a);
    }
    subtract(rhs) {
        return Rgba.createWithRgb(this._rgb.subtract(rhs._rgb), this._a - rhs._a);
    }
    multiply(rhs) {
        return Rgba.createWithRgb(this._rgb.multiply(rhs._rgb), this._a * rhs._a);
    }
    divide(rhs) {
        return Rgba.createWithRgb(this._rgb.divide(rhs._rgb), this._a / rhs._a);
    }
    addScalar(n) {
        return Rgba.createWithRgb(this._rgb.addScalar(n), this._a + n);
    }
    subtractScalar(n) {
        return Rgba.createWithRgb(this._rgb.subtractScalar(n), this._a - n);
    }
    multiplyScalar(n) {
        return Rgba.createWithRgb(this._rgb.multiplyScalar(n), this._a * n);
    }
    divideScalar(n) {
        return Rgba.createWithRgb(this._rgb.divideScalar(n), this._a / n);
    }
    powScalar(n) {
        return Rgba.createWithRgb(this._rgb.powScalar(n), Math.pow(this._a, n));
    }
}
Rgba.default = new Rgba(Rgb.create(0, 0, 0), 0);
//# sourceMappingURL=data:application/json;base64,