export class BoundTexture {
    constructor(texture, textureIndex, priority, time) {
        this.texture = texture;
        this.textureIndex = textureIndex;
        this.priority = priority;
        this.time = time;
    }
    isLessThan(rhs) {
        if (this.priority !== rhs.priority) {
            return this.priority < rhs.priority;
        }
        return this.time < rhs.time;
    }
}
export class TextureManager {
    constructor(renderer) {
        this.TEXTURE_SLOTS = 32;
        this._activeTextures = 0;
        console.assert(renderer != null);
        const textures = new Array(this.TEXTURE_SLOTS);
        for (let i = 0, ilen = this.TEXTURE_SLOTS; i < ilen; i++) {
            textures[i] = new BoundTexture(null, i, 0, 0);
        }
        this._boundTextures = textures;
        this._renderer = renderer;
    }
    bindTexture(texture, priority) {
        console.assert(texture != null);
        console.assert(priority >= 0);
        let idx = this.getIndexOf(texture);
        let bTex;
        if (idx !== -1) {
            bTex = this._boundTextures[idx];
        }
        else {
            if (this._activeTextures < this.TEXTURE_SLOTS) {
                bTex = this.getNextBoundTexture();
            }
            else {
                bTex = this.getLowestPriorityBoundTexture();
            }
            bTex.texture = texture;
            idx = this.getIndexOf(texture);
            const gl = this._renderer.gl;
            gl.activeTexture(gl.TEXTURE0 + bTex.textureIndex);
            gl.bindTexture(gl.TEXTURE_2D, this._boundTextures[idx].texture.textureWGL);
        }
        bTex.priority = priority;
        bTex.time = Date.now();
        return bTex.textureIndex;
    }
    getNextBoundTexture() {
        return this._boundTextures[this._activeTextures++];
    }
    getLowestPriorityBoundTexture() {
        const bTextures = this._boundTextures;
        let lowest = bTextures[0];
        for (let i = 1, ilen = bTextures.length; i < ilen; i++) {
            if (lowest.isLessThan(bTextures[i])) {
                lowest = bTextures[i];
            }
        }
        return lowest;
    }
    getIndexOf(texture) {
        console.assert(texture != null);
        const bTextures = this._boundTextures;
        for (let i = 0, ilen = bTextures.length; i < ilen; i++) {
            if (bTextures[i].texture === texture) {
                return i;
            }
        }
        return -1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dHVyZU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvRW5naW5lL1JlbmRlcmluZy9UZXh0dXJlTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNO0lBQ0wsWUFFUSxPQUFnQixFQUdoQixZQUFvQixFQUdwQixRQUFnQixFQUdoQixJQUFZO1FBVFosWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUdoQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUdwQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBR2hCLFNBQUksR0FBSixJQUFJLENBQVE7SUFDaEIsQ0FBQztJQUdFLFVBQVUsQ0FBQyxHQUFpQjtRQUNsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUE7UUFDcEMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztDQUNEO0FBTUQsTUFBTTtJQU9MLFlBQVksUUFBa0I7UUFOWCxrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUk1QixvQkFBZSxHQUFHLENBQUMsQ0FBQztRQUc3QixPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBZSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDN0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMxRCxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUNELElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFHTSxXQUFXLENBQUMsT0FBZ0IsRUFBRSxRQUFnQjtRQUNwRCxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNoQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLElBQUksSUFBa0IsQ0FBQztRQUd2QixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQztZQUVMLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQy9DLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNuQyxDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO1lBQzdDLENBQUM7WUFHRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN2QixHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUcvQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUM3QixFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2xELEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RSxDQUFDO1FBR0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDMUIsQ0FBQztJQUdTLG1CQUFtQjtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBS1MsNkJBQTZCO1FBQ3RDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDdEMsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDeEQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsQ0FBQztRQUNGLENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUdTLFVBQVUsQ0FBQyxPQUFnQjtRQUNwQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDeEQsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1YsQ0FBQztRQUNGLENBQUM7UUFDRCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0QifQ==