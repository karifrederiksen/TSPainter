import { Batch, ElementsBatch } from "../Batch";
export class Attribute {
    constructor(type, size, instanced = false) {
        this.type = type;
        this.size = size;
        this.instanced = instanced;
        this.location = null;
    }
}
export class Uniform {
    constructor(type, value) {
        this.type = type;
        this.value = value;
        this.location = null;
    }
}
export class Shader {
    constructor(renderer, vertSrc, fragSrc, attributes = {}, uniforms = {}, maxTriangles, elements = false) {
        this.name = "base shader";
        console.assert(renderer != null, `Renderer is null ${renderer}`);
        console.assert(vertSrc != null, `VertSrc is ${vertSrc}`);
        console.assert(vertSrc !== "", "VertSrc is empty");
        console.assert(fragSrc != null, `FragSrc is ${fragSrc}`);
        console.assert(fragSrc !== "", "FragSrc is empty");
        console.assert(attributes != null, `Attributes is ${attributes}`);
        console.assert(uniforms != null, `Uniforms is ${uniforms}`);
        console.assert(maxTriangles != null, `MaxTriangles is ${maxTriangles}`);
        console.assert(maxTriangles > 0, `MaxTriangles is <=0 : ${maxTriangles}`);
        console.assert(elements != null, `Elements is ${elements}`);
        this._renderer = renderer;
        this._program = this._compileProgram(renderer.gl, vertSrc, fragSrc);
        this.attributes = attributes;
        this.uniforms = uniforms;
        this.bindAttributeLocations();
        this.cacheUniformLocations();
        if (elements === false) {
            this.batch = new Batch(renderer, attributes, maxTriangles);
        }
        else {
            this.batch = new ElementsBatch(renderer, attributes, maxTriangles);
        }
    }
    activate() {
        this._renderer.gl.useProgram(this._program);
    }
    bindAttributeLocations() {
        const gl = this._renderer.gl;
        const attributes = this.attributes;
        const keys = Object.keys(attributes);
        const program = this._program;
        for (let i = 0, ilen = keys.length; i < ilen; i++) {
            gl.bindAttribLocation(program, i, keys[i]);
            attributes[keys[i]].location = i;
        }
    }
    cacheUniformLocations() {
        const gl = this._renderer.gl;
        const uniforms = this.uniforms;
        const program = this._program;
        const keys = Object.keys(uniforms);
        for (let i = 0, ilen = keys.length; i < ilen; i++) {
            uniforms[keys[i]].location = gl.getUniformLocation(program, keys[i]);
        }
    }
    syncUniforms() {
        const gl = this._renderer.gl;
        const uniforms = this.uniforms;
        const keys = Object.keys(uniforms);
        for (let i = 0, ilen = keys.length; i < ilen; i++) {
            this._syncUniform(uniforms[keys[i]]);
        }
    }
    _syncUniform(uniform) {
        const location = uniform.location;
        const value = uniform.value;
        switch (uniform.type) {
            case "b":
                this._renderer.gl.uniform1i(location, (value === true ? 1 : 0));
                break;
            case "i1":
            case "1i":
                this._renderer.gl.uniform1i(location, value);
                break;
            case "i2":
            case "2i":
                this._renderer.gl.uniform2i(location, value.x, value.y);
                break;
            case "i3":
            case "3i":
                this._renderer.gl.uniform3i(location, value.x, value.y, value.z);
                break;
            case "i4":
            case "4i":
                this._renderer.gl.uniform4i(location, value.x, value.y, value.z, value.w);
                break;
            case "f1":
            case "1f":
                this._renderer.gl.uniform1f(location, value);
                break;
            case "f2":
            case "2f":
                this._renderer.gl.uniform2f(location, value.x, value.y);
                break;
            case "f3":
            case "3f":
                this._renderer.gl.uniform3f(location, value.x, value.y, value.z);
                break;
            case "f4":
            case "4f":
                this._renderer.gl.uniform4f(location, value.x, value.y, value.z, value.w);
                break;
            case "mat3":
                this._renderer.gl.uniformMatrix3fv(location, false, value);
                break;
            case "t":
                const texture = value;
                const idx = this._renderer.textureManager.bindTexture(texture, 0);
                this._renderer.gl.uniform1i(location, idx);
                break;
            default:
                console.error("Shader -- unknown uniform type: ", uniform.type, " -- value: ", value);
                return;
        }
    }
    _recompileProgram(vertSrc, fragSrc) {
        const gl = this._renderer.gl;
        const newProgram = this._compileProgram(gl, vertSrc, fragSrc);
        if (newProgram === null) {
            console.warn("Failed to recompile program.");
            return false;
        }
        gl.deleteProgram(this._program);
        this._program = newProgram;
        return true;
    }
    _compileProgram(gl, vertSrc, fragSrc) {
        const vert = this._compileShader(gl, vertSrc, gl.VERTEX_SHADER);
        const frag = this._compileShader(gl, fragSrc, gl.FRAGMENT_SHADER);
        const program = gl.createProgram();
        gl.attachShader(program, vert);
        gl.attachShader(program, frag);
        gl.linkProgram(program);
        gl.deleteShader(vert);
        gl.deleteShader(frag);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.error("Failed to link program");
            console.warn("Validate status: ", gl.getProgramParameter(program, gl.VALIDATE_STATUS));
            console.warn("Error: ", gl.getError());
            console.warn("ProgramInfoLog: ", gl.getProgramInfoLog(program));
            gl.deleteProgram(program);
            throw new Error();
        }
        return program;
    }
    _compileShader(gl, src, type) {
        const shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);
        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {
            console.error("Failed to compile shader");
            console.warn("ShaderInfoLog: ", gl.getShaderInfoLog(shader));
            console.log(src);
            gl.deleteShader(shader);
            throw new Error();
        }
        return shader;
    }
}
//# sourceMappingURL=data:application/json;base64,