import { DrawPoint } from "./DrawPoints";
import { Vec2 } from "../Math/Vec";
export function interpolatorGenerator(spacingThresholdPx) {
    return (start) => {
        return (end) => {
            console.assert(end != null, `End is ${end}`);
            const results = interpolationFunction2(spacingThresholdPx, start, end);
            Object.freeze(results);
            return results;
        };
    };
}
function getPercentagesToAdd(spacing, start, end) {
    const arr = new Array();
    const endSpacing = Math.max(spacing * end.scale);
    const endX = end.position.x;
    const endY = end.position.y;
    const totalDist = Vec2.distance(start.position, end.position);
    let dist = totalDist;
    let p = .1;
    let x = start.position.x;
    let y = start.position.y;
    let scale = start.scale;
    let previous = start;
    while (dist > endSpacing && p > 0) {
        p = (spacing * start.scale) / dist;
        x += p * (endX - x);
        y += p * (endY - y);
        scale += p * (end.scale - scale);
        start = new DrawPoint(Vec2.create(x, y), start.size, scale, undefined, undefined);
        if (previous != null && start.notEqual(previous)) {
            arr.push(dist / totalDist);
            previous = start;
        }
        dist = Vec2.distance(start.position, end.position);
    }
    return arr.reverse();
}
function interpolationFunction2(spacing, start, end) {
    const percentages = getPercentagesToAdd(spacing, start, end);
    const funcs = getFunctions(start, end);
    return percentages.map(p => new DrawPoint(funcs.position(p), end.size, funcs.scale(p), funcs.rotation(p), funcs.color(p)));
}
function getFunctions(start, end) {
    return {
        position: arithmeticInterpFunc(start.position, end.position),
        scale: numberInterpFunc(start.scale, end.scale),
        rotation: numberInterpFunc(start.rotation, end.rotation),
        color: arithmeticInterpFunc(start.color.toRgba(), end.color.toRgba())
    };
}
function numberInterpFunc(start, end) {
    const delta = end - start;
    if (delta === 0) {
        return () => start;
    }
    return (p) => start + delta * p;
}
function arithmeticInterpFunc(start, end) {
    const delta = end.subtract(start);
    if (delta.isDefault()) {
        return (p) => start;
    }
    return (p) => start.add(delta.multiplyScalar(p));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJwb2xhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9FbmdpbmUvUmVuZGVyaW5nL0ludGVycG9sYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQWUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBTWhELE1BQU0sZ0NBQWdDLGtCQUEwQjtJQUMvRCxNQUFNLENBQUMsQ0FBQyxLQUFnQjtRQUN2QixNQUFNLENBQUMsQ0FBQyxHQUFjO1lBQ3JCLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDN0MsTUFBTSxPQUFPLEdBQUcsc0JBQXNCLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNoQixDQUFDLENBQUE7SUFDRixDQUFDLENBQUE7QUFDRixDQUFDO0FBR0QsNkJBQTZCLE9BQWUsRUFBRSxLQUFnQixFQUFFLEdBQWM7SUFDN0UsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztJQUVoQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakQsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDNUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU5RCxJ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