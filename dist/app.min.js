(function (exports) {
'use strict';

var _callbacks = {};
function subscribe(id, callback) {
    var callList = _callbacks[id];
    if (callList == null) {
        callList = [];
        _callbacks[id] = callList;
    }
    callList.push(callback);
}

function broadcast(id, arg) {
    var callList = _callbacks[id];
    if (callList != null) {
        for (var i = 0, ilen = callList.length; i < ilen; i++) {
            callList[i](arg);
        }
    } else {
        var keys = Object.keys(ID);
        console.warn(["Event ", id, " \"", keys[keys.length / 2 + id], "\"", " does not have any callbacks associated with it."].join(""));
    }
}
var ID;
(function (ID) {
    ID[ID["PointerDown"] = 0] = "PointerDown";
    ID[ID["PointerUp"] = 1] = "PointerUp";
    ID[ID["PointerMove"] = 2] = "PointerMove";
    ID[ID["PointerDrag"] = 3] = "PointerDrag";
    ID[ID["ButtonToolBrush"] = 4] = "ButtonToolBrush";
    ID[ID["ButtonToolEraser"] = 5] = "ButtonToolEraser";
    ID[ID["ButtonToolBlur"] = 6] = "ButtonToolBlur";
    ID[ID["BrushHue"] = 7] = "BrushHue";
    ID[ID["BrushSaturation"] = 8] = "BrushSaturation";
    ID[ID["BrushValue"] = 9] = "BrushValue";
    ID[ID["BrushAlpha"] = 10] = "BrushAlpha";
    ID[ID["BrushDensity"] = 11] = "BrushDensity";
    ID[ID["BrushSoftness"] = 12] = "BrushSoftness";
    ID[ID["BrushSpacing"] = 13] = "BrushSpacing";
    ID[ID["BrushSize"] = 14] = "BrushSize";
})(ID || (ID = {}));

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Setting = function Setting(id, value) {
    var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    classCallCheck(this, Setting);

    this.id = id;
    this.value = value;
    this.callbacks = callbacks;
};
var _settings = {};
function setValue(id, value) {
    var setting = _settings[id];
    if (setting == null) {
        setting = new Setting(id, value);
        _settings[id] = setting;
    } else {
        setting.value = value;
    }
    broadcast$1(setting);
}
function getValue(id) {
    return _settings[id] != null ? _settings[id].value : null;
}
function subscribe$1(id, callback) {
    var setting = _settings[id];
    if (setting == null) {
        setting = new Setting(id, null);
        _settings[id] = setting;
    }
    setting.callbacks.push(callback);
}

function broadcast$1(setting) {
    var callbacks = setting.callbacks;
    var value = setting.value;
    for (var i = 0, ilen = callbacks.length; i < ilen; i++) {
        callbacks[i](value);
    }
}
var ID$1;
(function (ID) {
    ID[ID["CanvasWidth"] = 0] = "CanvasWidth";
    ID[ID["CanvasHeight"] = 1] = "CanvasHeight";
    ID[ID["Gamma"] = 2] = "Gamma";
    ID[ID["ToolId"] = 3] = "ToolId";
    ID[ID["BrushTextureSize"] = 4] = "BrushTextureSize";
    ID[ID["BrushSize"] = 5] = "BrushSize";
    ID[ID["BrushSoftness"] = 6] = "BrushSoftness";
    ID[ID["BrushSpacing"] = 7] = "BrushSpacing";
    ID[ID["BrushDensity"] = 8] = "BrushDensity";
    ID[ID["BrushHue"] = 9] = "BrushHue";
    ID[ID["BrushSaturation"] = 10] = "BrushSaturation";
    ID[ID["BrushValue"] = 11] = "BrushValue";
    ID[ID["BrushAlpha"] = 12] = "BrushAlpha";
    ID[ID["RenderingMaxDrawPoints"] = 13] = "RenderingMaxDrawPoints";
    ID[ID["RenderingBlendMode"] = 14] = "RenderingBlendMode";
})(ID$1 || (ID$1 = {}));

var Vec2 = function () {
    function Vec2() {
        var _x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;

        var _y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;

        classCallCheck(this, Vec2);

        this._x = _x;
        this._y = _y;
        Object.freeze(this);
    }

    createClass(Vec2, [{
        key: "default",
        value: function _default() {
            return Vec2.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Vec2.default;
        }
    }, {
        key: "withX",
        value: function withX(n) {
            return Vec2.create(n, this._y);
        }
    }, {
        key: "withY",
        value: function withY(n) {
            return Vec2.create(this._x, n);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Vec2.create(this._x + rhs._x, this._y + rhs._y);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Vec2.create(this._x - rhs._x, this._y - rhs._y);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Vec2.create(this._x * rhs._x, this._y * rhs._y);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Vec2.create(this._x / rhs._x, this._y / rhs._y);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Vec2.create(this._x + n, this._y + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Vec2.create(this._x - n, this._y - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Vec2.create(this._x * n, this._y * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Vec2.create(this._x / n, this._y / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Vec2.create(Math.pow(this._x, n), Math.pow(this._y, n));
        }
    }, {
        key: "equal",
        value: function equal(rhs) {
            return this._x === rhs._x && this._y === rhs._y;
        }
    }, {
        key: "x",
        get: function get$$1() {
            return this._x;
        }
    }, {
        key: "y",
        get: function get$$1() {
            return this._y;
        }
    }], [{
        key: "distance",
        value: function distance(from, to) {
            return Math.sqrt(Math.pow(to._x - from._x, 2) + Math.pow(to._y - from._y, 2));
        }
    }, {
        key: "angle",
        value: function angle(from, to) {
            return Math.atan2(to._y - from._y, to._x - from._y);
        }
    }, {
        key: "dot",
        value: function dot(lhs, rhs) {
            return lhs._x * rhs._x + lhs._y * rhs._y;
        }
    }]);
    return Vec2;
}();
Vec2.default = new Vec2(0, 0);
Vec2.create = function () {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (x === 0 && y === 0) {
        return Vec2.default;
    }
    return new Vec2(x, y);
};

var Vec3 = function () {
    function Vec3() {
        var _x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;

        var _y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;

        var _z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;

        classCallCheck(this, Vec3);

        this._x = _x;
        this._y = _y;
        this._z = _z;
        Object.freeze(this);
    }

    createClass(Vec3, [{
        key: "default",
        value: function _default() {
            return Vec3.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Vec3.default;
        }
    }, {
        key: "withX",
        value: function withX(n) {
            Vec3.create(this.x + n, this.y, this.z);
        }
    }, {
        key: "withY",
        value: function withY(n) {
            Vec3.create(this.x, this.y + n, this.z);
        }
    }, {
        key: "withZ",
        value: function withZ(n) {
            Vec3.create(this.x, this.y, this.z + n);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Vec3.create(this._x + rhs._x, this._y + rhs._y, this._z + rhs._z);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Vec3.create(this._x - rhs._x, this._y - rhs._y, this._z - rhs._z);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Vec3.create(this._x * rhs._x, this._y * rhs._y, this._z * rhs._z);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Vec3.create(this._x / rhs._x, this._y / rhs._y, this._z / rhs._z);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Vec3.create(this._x + n, this._y + n, this._z + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Vec3.create(this._x - n, this._y - n, this._z - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Vec3.create(this._x * n, this._y * n, this._z * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Vec3.create(this._x / n, this._y / n, this._z / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Vec3.create(Math.pow(this.x, n), Math.pow(this.y, n), Math.pow(this.z, n));
        }
    }, {
        key: "round",
        value: function round() {
            return Vec3.create(this.x + .5 | 0, this.y + .5 | 0, this.z + .5 | 0);
        }
    }, {
        key: "x",
        get: function get$$1() {
            return this._x;
        }
    }, {
        key: "y",
        get: function get$$1() {
            return this._y;
        }
    }, {
        key: "z",
        get: function get$$1() {
            return this._z;
        }
    }], [{
        key: "create",
        value: function create(x, y, z) {
            if ([x, y, z].every(function (x) {
                return x === 0;
            })) {
                return Vec3.default;
            }
            return new Vec3(x, y, z);
        }
    }]);
    return Vec3;
}();
Vec3.default = new Vec3(0, 0, 0);

var Vec4 = function () {
    function Vec4() {
        var _x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;

        var _y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;

        var _z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;

        var _w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.0;

        classCallCheck(this, Vec4);

        this._x = _x;
        this._y = _y;
        this._z = _z;
        this._w = _w;
        Object.freeze(this);
    }

    createClass(Vec4, [{
        key: "default",
        value: function _default() {
            return Vec4.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Vec4.default;
        }
    }, {
        key: "withXY",
        value: function withXY(x, y) {
            return Vec4.create(x, y, this.z, this.w);
        }
    }, {
        key: "wthZW",
        value: function wthZW(z, w) {
            return Vec4.create(this.x, this.y, z, w);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Vec4.create(this._x + rhs._x, this._y + rhs._y, this._z + rhs._z, this._w + rhs._w);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Vec4.create(this._x - rhs._x, this._y - rhs._y, this._z - rhs._z, this._w - rhs._w);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Vec4.create(this._x * rhs._x, this._y * rhs._y, this._z * rhs._z, this._w * rhs._w);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Vec4.create(this._x / rhs._x, this._y / rhs._y, this._z / rhs._z, this._w / rhs._w);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Vec4.create(this._x + n, this._y + n, this._z + n, this._w + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Vec4.create(this._x - n, this._y - n, this._z - n, this._w - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Vec4.create(this._x * n, this._y * n, this._z * n, this._w * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Vec4.create(this._x / n, this._y / n, this._z / n, this._w / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Vec4.create(Math.pow(this._x, n), Math.pow(this._y, n), Math.pow(this._z, n), Math.pow(this._w, n));
        }
    }, {
        key: "x",
        get: function get$$1() {
            return this._x;
        }
    }, {
        key: "y",
        get: function get$$1() {
            return this._y;
        }
    }, {
        key: "z",
        get: function get$$1() {
            return this._z;
        }
    }, {
        key: "w",
        get: function get$$1() {
            return this._w;
        }
    }, {
        key: "width",
        get: function get$$1() {
            return this.z;
        }
    }, {
        key: "height",
        get: function get$$1() {
            return this.w;
        }
    }], [{
        key: "create",
        value: function create(x, y, z, w) {
            if ([x, y, z, w].every(function (x) {
                return x === 0;
            })) {
                return Vec4.default;
            }
            return new Vec4(x, y, z, w);
        }
    }]);
    return Vec4;
}();
Vec4.default = new Vec4(0, 0, 0, 0);

var Hsv = function () {
    function Hsv(_h, _s, _v) {
        classCallCheck(this, Hsv);

        this._h = _h;
        this._s = _s;
        this._v = _v;
        Object.freeze(this);
    }

    createClass(Hsv, [{
        key: "default",
        value: function _default() {
            return Hsv.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Hsv.default;
        }
    }, {
        key: "withH",
        value: function withH(n) {
            return Hsv.create(n, this._s, this._v);
        }
    }, {
        key: "withS",
        value: function withS(n) {
            return Hsv.create(this._h, n, this._v);
        }
    }, {
        key: "withV",
        value: function withV(n) {
            return Hsv.create(this._h, this._s, n);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Hsv.create(this._h + rhs._h, this._s + rhs._s, this._v + rhs._v);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Hsv.create(this._h - rhs._h, this._s - rhs._s, this._v - rhs._v);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Hsv.create(this._h * rhs._h, this._s * rhs._s, this._v * rhs._v);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Hsv.create(this._h / rhs._h, this._s / rhs._s, this._v / rhs._v);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Hsv.create(this._h + n, this._s + n, this._v + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Hsv.create(this._h - n, this._s - n, this._v - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Hsv.create(this._h * n, this._s * n, this._v * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Hsv.create(this._h / n, this._s / n, this._v / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Hsv.create(Math.pow(this._h, n), Math.pow(this._s, n), Math.pow(this._v, n));
        }
    }, {
        key: "pow",
        value: function pow(n) {
            return Hsv.create(Math.pow(this._h, n), Math.pow(this._s, n), Math.pow(this._v, n));
        }
    }, {
        key: "toRgb",
        value: function toRgb() {
            var h = this._h;
            var s = this._s;
            var v = this._v;
            var i = Math.floor(h * 6);
            var f = h * 6 - i;
            var p = v * (1 - s);
            var q = v * (1 - f * s);
            var t = v * (1 - (1 - f) * s);
            var r = void 0;
            var g = void 0;
            var b = void 0;
            switch (i % 6) {
                case 0:
                    r = v, g = t, b = p;
                    break;
                case 1:
                    r = q, g = v, b = p;
                    break;
                case 2:
                    r = p, g = v, b = t;
                    break;
                case 3:
                    r = p, g = q, b = v;
                    break;
                case 4:
                    r = t, g = p, b = v;
                    break;
                default:
                    r = v, g = p, b = q;
                    break;
            }
            return Rgb.create(r, g, b);
        }
    }, {
        key: "toHsv",
        value: function toHsv() {
            return this;
        }
    }, {
        key: "toHex",
        value: function toHex() {
            return this.toRgb().toHex();
        }
    }, {
        key: "toGray",
        value: function toGray() {
            return this.toRgb().toGray();
        }
    }, {
        key: "h",
        get: function get$$1() {
            return this._h;
        }
    }, {
        key: "s",
        get: function get$$1() {
            return this._s;
        }
    }, {
        key: "v",
        get: function get$$1() {
            return this._v;
        }
    }], [{
        key: "create",
        value: function create(h, s, v) {
            if ([h, s, v].every(function (x) {
                return x === 0;
            })) {
                return Hsv.default;
            }
            return new Hsv(h, s, v);
        }
    }]);
    return Hsv;
}();
Hsv.default = new Hsv(0, 0, 0);
var Rgb = function () {
    function Rgb(_r, _g, _b) {
        classCallCheck(this, Rgb);

        this._r = _r;
        this._g = _g;
        this._b = _b;
        Object.freeze(this);
    }

    createClass(Rgb, [{
        key: "default",
        value: function _default() {
            return Rgb.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Rgb.default;
        }
    }, {
        key: "withR",
        value: function withR(n) {
            return Rgb.create(n, this._g, this._b);
        }
    }, {
        key: "withG",
        value: function withG(n) {
            return Rgb.create(this._r, n, this._b);
        }
    }, {
        key: "withB",
        value: function withB(n) {
            return Rgb.create(this._r, this._g, n);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Rgb.create(this._r + rhs._r, this._g + rhs._g, this._b + rhs._b);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Rgb.create(this._r - rhs._r, this._g - rhs._g, this._b - rhs._b);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Rgb.create(this._r * rhs._r, this._g * rhs._g, this._b * rhs._b);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Rgb.create(this._r / rhs._r, this._g / rhs._g, this._b / rhs._b);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Rgb.create(this._r + n, this._g + n, this._b + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Rgb.create(this._r - n, this._g - n, this._b - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Rgb.create(this._r * n, this._g * n, this._b * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Rgb.create(this._r / n, this._g / n, this._b / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Rgb.create(Math.pow(this._r, n), Math.pow(this._g, n), Math.pow(this._b, n));
        }
    }, {
        key: "round",
        value: function round() {
            return Rgb.create(this._r + .5 | 0, this._g + .5 | 0, this._b + .5 | 0);
        }
    }, {
        key: "toRgb",
        value: function toRgb() {
            return this;
        }
    }, {
        key: "toHsv",
        value: function toHsv() {
            var r = this._r;
            var g = this._g;
            var b = this._b;
            var max = Math.max(r, g, b);
            var min = Math.min(r, g, b);
            var d = max - min;
            var s = max === 0 ? 0 : d / max;
            var v = max;
            var h = void 0;
            switch (max) {
                case min:
                    h = 0;
                    break;
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                default:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
            return Hsv.create(h, s, v);
        }
    }, {
        key: "toHex",
        value: function toHex() {
            return ((this._r * 255 | 0) << 16) + ((this._g * 255 | 0) << 8) + (this._b * 255 | 0);
        }
    }, {
        key: "toGray",
        value: function toGray() {
            var r = this._r;
            var g = this._g;
            var b = this._b;
            return Math.sqrt(.299 * r * r + .587 * g * g + .114 * b * b);
        }
    }, {
        key: "r",
        get: function get$$1() {
            return this._r;
        }
    }, {
        key: "g",
        get: function get$$1() {
            return this._g;
        }
    }, {
        key: "b",
        get: function get$$1() {
            return this._b;
        }
    }], [{
        key: "create",
        value: function create(r, g, b) {
            if ([r, g, b].every(function (x) {
                return x === 0;
            })) {
                return Rgb.default;
            }
            return new Rgb(r, g, b);
        }
    }]);
    return Rgb;
}();
Rgb.default = new Rgb(0, 0, 0);
var Hsva = function () {
    function Hsva(_hsv, _a) {
        var _this = this;

        classCallCheck(this, Hsva);

        this._hsv = _hsv;
        this._a = _a;
        this.toRgba = function () {
            return Rgba.createWithRgb(_this._hsv.toRgb(), _this._a);
        };
        this.toHsva = function () {
            return _this;
        };
        this.toHex = function () {
            return _this.toRgba().toHex();
        };
        Object.freeze(this);
    }

    createClass(Hsva, [{
        key: "default",
        value: function _default() {
            return Hsva.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Hsva.default;
        }
    }, {
        key: "withH",
        value: function withH(n) {
            return Hsva.createWithHsv(this._hsv.withH(n), this._a);
        }
    }, {
        key: "withS",
        value: function withS(n) {
            return Hsva.createWithHsv(this._hsv.withS(n), this._a);
        }
    }, {
        key: "withV",
        value: function withV(n) {
            return Hsva.createWithHsv(this._hsv.withV(n), this._a);
        }
    }, {
        key: "WithA",
        value: function WithA(n) {
            return Hsva.createWithHsv(this._hsv, n);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Hsva.createWithHsv(this._hsv.add(rhs._hsv), this._a + rhs._a);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Hsva.createWithHsv(this._hsv.subtract(rhs._hsv), this._a - rhs._a);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Hsva.createWithHsv(this._hsv.multiply(rhs._hsv), this._a * rhs._a);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Hsva.createWithHsv(this._hsv.divide(rhs._hsv), this._a / rhs._a);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Hsva.createWithHsv(this._hsv.addScalar(n), this._a + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Hsva.createWithHsv(this._hsv.subtractScalar(n), this._a - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Hsva.createWithHsv(this._hsv.multiplyScalar(n), this._a * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Hsva.createWithHsv(this._hsv.divideScalar(n), this._a / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Hsva.createWithHsv(this._hsv.powScalar(n), Math.pow(this._a, n));
        }
    }, {
        key: "hsv",
        get: function get$$1() {
            return this._hsv;
        }
    }, {
        key: "h",
        get: function get$$1() {
            return this._hsv.h;
        }
    }, {
        key: "s",
        get: function get$$1() {
            return this._hsv.s;
        }
    }, {
        key: "v",
        get: function get$$1() {
            return this._hsv.v;
        }
    }, {
        key: "a",
        get: function get$$1() {
            return this._a;
        }
    }], [{
        key: "create",
        value: function create(h, s, v, a) {
            if ([h, s, v, a].every(function (x) {
                return x === 0;
            })) {
                return Hsva.default;
            }
            return new Hsva(Hsv.create(h, s, v), a);
        }
    }, {
        key: "createWithHsv",
        value: function createWithHsv(hsv, a) {
            if (hsv === Hsva.default.hsv && a === 0) {
                return Hsva.default;
            }
            return new Hsva(hsv, a);
        }
    }]);
    return Hsva;
}();
Hsva.default = new Hsva(Hsv.create(0, 0, 0), 0);
var Rgba = function () {
    function Rgba(_rgb, _a) {
        classCallCheck(this, Rgba);

        this._rgb = _rgb;
        this._a = _a;
        Object.freeze(this);
    }

    createClass(Rgba, [{
        key: "default",
        value: function _default() {
            return Rgba.default;
        }
    }, {
        key: "isDefault",
        value: function isDefault() {
            return this === Rgba.default;
        }
    }, {
        key: "withR",
        value: function withR(n) {
            return Rgba.createWithRgb(this._rgb.withR(n), this._a);
        }
    }, {
        key: "withG",
        value: function withG(n) {
            return Rgba.createWithRgb(this._rgb.withG(n), this._a);
        }
    }, {
        key: "withB",
        value: function withB(n) {
            return Rgba.createWithRgb(this._rgb.withB(n), this._a);
        }
    }, {
        key: "WithA",
        value: function WithA(n) {
            return Rgba.createWithRgb(this._rgb, n);
        }
    }, {
        key: "toRgba",
        value: function toRgba() {
            return this;
        }
    }, {
        key: "toHsva",
        value: function toHsva() {
            return Hsva.createWithHsv(this._rgb.toHsv(), this._a);
        }
    }, {
        key: "toHex",
        value: function toHex() {
            return (this._rgb.toHex() << 8) + (this._a + .5 | 0);
        }
    }, {
        key: "add",
        value: function add(rhs) {
            return Rgba.createWithRgb(this._rgb.add(rhs._rgb), this._a + rhs._a);
        }
    }, {
        key: "subtract",
        value: function subtract(rhs) {
            return Rgba.createWithRgb(this._rgb.subtract(rhs._rgb), this._a - rhs._a);
        }
    }, {
        key: "multiply",
        value: function multiply(rhs) {
            return Rgba.createWithRgb(this._rgb.multiply(rhs._rgb), this._a * rhs._a);
        }
    }, {
        key: "divide",
        value: function divide(rhs) {
            return Rgba.createWithRgb(this._rgb.divide(rhs._rgb), this._a / rhs._a);
        }
    }, {
        key: "addScalar",
        value: function addScalar(n) {
            return Rgba.createWithRgb(this._rgb.addScalar(n), this._a + n);
        }
    }, {
        key: "subtractScalar",
        value: function subtractScalar(n) {
            return Rgba.createWithRgb(this._rgb.subtractScalar(n), this._a - n);
        }
    }, {
        key: "multiplyScalar",
        value: function multiplyScalar(n) {
            return Rgba.createWithRgb(this._rgb.multiplyScalar(n), this._a * n);
        }
    }, {
        key: "divideScalar",
        value: function divideScalar(n) {
            return Rgba.createWithRgb(this._rgb.divideScalar(n), this._a / n);
        }
    }, {
        key: "powScalar",
        value: function powScalar(n) {
            return Rgba.createWithRgb(this._rgb.powScalar(n), Math.pow(this._a, n));
        }
    }, {
        key: "rgb",
        get: function get$$1() {
            return this._rgb;
        }
    }, {
        key: "r",
        get: function get$$1() {
            return this._rgb.r;
        }
    }, {
        key: "g",
        get: function get$$1() {
            return this._rgb.g;
        }
    }, {
        key: "b",
        get: function get$$1() {
            return this._rgb.b;
        }
    }, {
        key: "a",
        get: function get$$1() {
            return this._a;
        }
    }], [{
        key: "create",
        value: function create(r, g, b, a) {
            if ([r, g, b, a].every(function (x) {
                return x === 0;
            })) {
                return Rgba.default;
            }
            return new Rgba(Rgb.create(r, g, b), a);
        }
    }, {
        key: "createWithRgb",
        value: function createWithRgb(rgb, a) {
            if (rgb === Rgba.default.rgb && a === 0) {
                return Rgba.default;
            }
            return new Rgba(rgb, a);
        }
    }]);
    return Rgba;
}();
Rgba.default = new Rgba(Rgb.create(0, 0, 0), 0);

var clamp = function clamp(n, min, max) {
    return Math.min(Math.max(n, min), max);
};



var expostep = function expostep(x) {
    if (x === 0.0) {
        return 0.0;
    }
    return Math.pow(2.718281828459, 1 - 1 / (x * x));
};

var SliderElement = function () {
    function SliderElement(sliderId, text, args) {
        classCallCheck(this, SliderElement);

        var inputElem = this.input = document.getElementById(sliderId);
        var textElem = this._text = document.getElementById(sliderId + "Text");
        this._value = document.getElementById(sliderId + "Value");
        this.precision = args.precision ? args.precision : 2;
        inputElem.type = "range";
        inputElem.min = args.min ? args.min.toString() : "0";
        inputElem.max = args.max ? args.max.toString() : "1";
        inputElem.step = args.step ? args.step.toString() : "0.01";
        inputElem.value = args.value ? args.value.toString() : "";
        textElem.innerHTML = text;
    }

    createClass(SliderElement, [{
        key: "value",
        get: function get$$1() {
            return parseFloat(this.input.value);
        },
        set: function set$$1(val) {
            this.input.value = val.toString();
            this._value.innerHTML = val.toFixed(this.precision);
        }
    }]);
    return SliderElement;
}();
var SliderDoubleBinding = function SliderDoubleBinding(slider, eventId, settingsId) {
    var _this = this;

    classCallCheck(this, SliderDoubleBinding);

    this.onSettingsChange = function (val) {
        _this.slider.value = val;
    };
    this.onUInput = function () {
        var value = _this.slider.value;
        broadcast(_this.eventId, value);
    };
    this.slider = slider;
    this.eventId = eventId;
    this.settingsId = settingsId;
    slider.value = getValue(settingsId);
    slider.input.addEventListener("input", this.onUInput);
    subscribe$1(settingsId, this.onSettingsChange);
};

var ColorAreaPicker = function () {
    function ColorAreaPicker(id) {
        classCallCheck(this, ColorAreaPicker);

        this.element = document.getElementById(id);
    }

    createClass(ColorAreaPicker, [{
        key: "setColor",
        value: function setColor(rgb, position) {
            console.assert(rgb != null);
            this.element.style.left = position.x - 5 + "px";
            this.element.style.top = position.y - 5 + "px";
            var gray = rgb.toGray();
            var borderColor = gray > .5 ? 0 : 255;
            this.element.style.borderColor = "rgb(" + borderColor + ", " + borderColor + ", " + borderColor + ")";
        }
    }]);
    return ColorAreaPicker;
}();

var ColorAreaDoubleBinding = function () {
    function ColorAreaDoubleBinding(elementId, pickerId) {
        var _this2 = this;

        classCallCheck(this, ColorAreaDoubleBinding);

        this.isPointerDown = false;
        this.pointerdown = function (ev) {
            _this2.isPointerDown = true;
            _this2.pointermove(ev);
        };
        this.pointerup = function () {
            _this2.isPointerDown = false;
        };
        this.pointermove = function (ev) {
            if (_this2.isPointerDown === false) {
                return;
            }
            var bounds = _this2.element.getBoundingClientRect();
            var x = ev.x - bounds.left;
            var y = ev.y - bounds.top;
            var xpct = x / _this2.element.clientWidth;
            var ypct = 1 - y / _this2.element.clientHeight;
            xpct = clamp(xpct, 0, 1);
            ypct = clamp(ypct, 0, 1);
            broadcast(ID.BrushSaturation, xpct);
            broadcast(ID.BrushValue, ypct);
        };
        console.assert(elementId != null);
        console.assert(elementId !== "");
        console.assert(pickerId != null);
        console.assert(pickerId !== "");
        this.element = document.getElementById(elementId);
        this.pickerElement = new ColorAreaPicker(pickerId);
        this.element.addEventListener("pointerdown", this.pointerdown);
        document.body.addEventListener("pointerup", this.pointerup);
        document.body.addEventListener("pointermove", this.pointermove);
    }

    createClass(ColorAreaDoubleBinding, [{
        key: "updateColor",
        value: function updateColor(colorHsv) {
            console.assert(colorHsv != null);
            var width = this.element.clientWidth;
            var height = this.element.clientHeight;
            var rgb = colorHsv.toRgb();
            var pickerPos = Vec2.create(Math.round(colorHsv.s * width), Math.round((1 - colorHsv.v) * height));
            this.pickerElement.setColor(rgb, pickerPos);
            var bgColor = Hsv.create(colorHsv.h, 1, 1).toRgb().multiplyScalar(255).round();
            var colorStyle = "rgb(" + bgColor.r + ", " + bgColor.g + ", " + bgColor.b + ")";
            this.element.style.backgroundColor = colorStyle;
        }
    }]);
    return ColorAreaDoubleBinding;
}();

var HueAreaSlider = function () {
    function HueAreaSlider(elementId, sliderId) {
        var _this3 = this;

        classCallCheck(this, HueAreaSlider);

        this.isPointerDown = false;
        this.pointerup = function () {
            _this3.isPointerDown = false;
        };
        this.pointerdown = function (ev) {
            _this3.isPointerDown = true;
            _this3.pointermove(ev);
        };
        this.pointermove = function (ev) {
            if (_this3.isPointerDown === false) {
                return;
            }
            var bounds = _this3.element.getBoundingClientRect();
            var x = ev.x - bounds.left;
            var xpct = x / _this3.element.clientWidth;
            xpct = clamp(xpct, 0, 1);
            broadcast(ID.BrushHue, xpct);
        };
        console.assert(elementId != null);
        console.assert(elementId !== "");
        console.assert(sliderId != null);
        console.assert(sliderId !== "");
        this.element = document.getElementById(elementId);
        this.sliderElement = document.getElementById(sliderId);
        this.element.addEventListener("pointerdown", this.pointerdown);
        document.body.addEventListener("pointerup", this.pointerup);
        document.body.addEventListener("pointermove", this.pointermove);
    }

    createClass(HueAreaSlider, [{
        key: "setHue",
        value: function setHue(hue) {
            var width = this.element.clientWidth;
            var x = Math.round(hue * width) - 1;
            this.sliderElement.style.left = x + "px";
        }
    }]);
    return HueAreaSlider;
}();

var ColorDisplay = function () {
    function ColorDisplay(primaryId, secondaryId) {
        classCallCheck(this, ColorDisplay);

        console.assert(primaryId != null);
        console.assert(primaryId !== "");
        console.assert(secondaryId != null);
        console.assert(secondaryId !== "");
        this.primaryElem = document.getElementById(primaryId);
        this.secondaryElem = document.getElementById(secondaryId);
    }

    createClass(ColorDisplay, [{
        key: "updateColor",
        value: function updateColor(rgb) {
            console.assert(rgb != null);
            this.primaryElem.style.backgroundColor = "rgb(" + rgb.r + ", " + rgb.g + ", " + rgb.b + ")";
        }
    }, {
        key: "swapColors",
        value: function swapColors() {
            var tmp = this.primaryElem.style.backgroundColor;
            this.primaryElem.style.backgroundColor = this.secondaryElem.style.backgroundColor;
            this.secondaryElem.style.backgroundColor = tmp;
        }
    }]);
    return ColorDisplay;
}();

var ColorSelectionArea = function ColorSelectionArea() {
    var _this4 = this;

    classCallCheck(this, ColorSelectionArea);

    this.secondaryColor = Hsv.create(0, 0, 1);
    this.getColorRgb = function () {
        return _this4.color.toRgb().multiplyScalar(255).round();
    };
    this.handleHue = function (value) {
        console.assert(value >= 0);
        console.assert(value <= 1);
        _this4.color = _this4.color.withH(value);
        _this4.satValArea.updateColor(_this4.color);
        _this4.hueSlider.setHue(value);
        _this4.colorDisplay.updateColor(_this4.getColorRgb());
    };
    this.handleSaturation = function (value) {
        console.assert(value >= 0);
        console.assert(value <= 1);
        _this4.color = _this4.color.withS(value);
        _this4.satValArea.updateColor(_this4.color);
        _this4.colorDisplay.updateColor(_this4.getColorRgb());
    };
    this.handleValue = function (value) {
        console.assert(value >= 0);
        console.assert(value <= 1);
        _this4.color = _this4.color.withV(value);
        _this4.satValArea.updateColor(_this4.color);
        _this4.colorDisplay.updateColor(_this4.getColorRgb());
    };
    this.satValArea = new ColorAreaDoubleBinding("pickingArea", "picker");
    this.hueSlider = new HueAreaSlider("hueArea", "hueAreaSlider");
    this.colorDisplay = new ColorDisplay("colorDisplayPrimary", "colorDisplaySecondary");
    this.colorDisplay.secondaryElem.addEventListener("pointerdown", function () {
        var tmp = _this4.color;
        _this4.color = _this4.secondaryColor;
        _this4.secondaryColor = tmp;
        _this4.colorDisplay.swapColors();
        broadcast(ID.BrushHue, _this4.color.h);
        broadcast(ID.BrushSaturation, _this4.color.s);
        broadcast(ID.BrushValue, _this4.color.v);
    });
    this.color = Hsv.create(getValue(ID$1.BrushHue), getValue(ID$1.BrushSaturation), getValue(ID$1.BrushValue));
    this.satValArea.updateColor(this.color);
    this.hueSlider.setHue(this.color.h);
    this.colorDisplay.updateColor(this.getColorRgb());
    subscribe(ID.BrushHue, this.handleHue);
    subscribe(ID.BrushSaturation, this.handleSaturation);
    subscribe(ID.BrushValue, this.handleValue);
};

var BlendMode;
(function (BlendMode) {
    BlendMode[BlendMode["Normal"] = 0] = "Normal";
    BlendMode[BlendMode["Erase"] = 1] = "Erase";
})(BlendMode || (BlendMode = {}));

var Batch = function () {
    function Batch(renderer, attributes, maxTriangles) {
        classCallCheck(this, Batch);

        this.arrayOffset = 0;
        console.assert(renderer != null, "Renderer is " + renderer);
        console.assert(attributes != null, "Attributes is " + attributes);
        console.assert(maxTriangles != null, "MaxTriangles is " + maxTriangles);
        console.assert(maxTriangles > 0, "MaxTriangles less than or equal to 0: " + maxTriangles);
        this._renderer = renderer;
        var gl = renderer.gl;
        var keys = Object.keys(attributes);
        var values = 0;
        for (var i = 0, ilen = keys.length; i < ilen; i++) {
            values += attributes[keys[i]].size;
        }
        this.BATCH_FLOATS_PER_INDEX = values;
        this.BATCH_STRIDE = values * 4;
        this.MAX_VERTICES = maxTriangles * 3;
        this._vertexBuffer = gl.createBuffer();
        this.array = new Float32Array(this.MAX_VERTICES * this.BATCH_FLOATS_PER_INDEX);
        this._attributes = attributes;
    }

    createClass(Batch, [{
        key: "flush",
        value: function flush() {
            var gl = this._renderer.gl;
            var arrayView = this.array.subarray(0, this.arrayOffset);
            gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, arrayView, gl.DYNAMIC_DRAW);
            var attributes = this._attributes;
            var keys = Object.keys(attributes);
            var stride = this.BATCH_STRIDE;
            var attribOffset = 0;
            var attrib = void 0;
            for (var i = 0, ilen = keys.length; i < ilen; i++) {
                attrib = attributes[keys[i]];
                gl.vertexAttribPointer(attrib.location, attrib.size, attrib.type, false, stride, attribOffset);
                gl.enableVertexAttribArray(attrib.location);
                attribOffset += attrib.size * 4;
            }
            this._draw(gl);
            this.arrayOffset = 0;
        }
    }, {
        key: "_draw",
        value: function _draw(gl) {
            console.assert(gl != null);
            var n = this.arrayOffset / this.BATCH_FLOATS_PER_INDEX;
            gl.drawArrays(gl.TRIANGLES, 0, n);
        }
    }]);
    return Batch;
}();
var ElementsBatch = function (_Batch) {
    inherits(ElementsBatch, _Batch);

    function ElementsBatch(renderer, attributes, maxElements) {
        classCallCheck(this, ElementsBatch);

        var _this = possibleConstructorReturn(this, (ElementsBatch.__proto__ || Object.getPrototypeOf(ElementsBatch)).call(this, renderer, attributes, Math.ceil(maxElements * 4 / 3)));

        var gl = renderer.gl;
        _this._indexBuffer = gl.createBuffer();
        var indexArray = new Uint16Array(_this.MAX_VERTICES);
        for (var i = 0, j = 0; i < _this.MAX_VERTICES; i += 6, j += 4) {
            indexArray[i + 0] = j + 0;
            indexArray[i + 1] = j + 1;
            indexArray[i + 2] = j + 2;
            indexArray[i + 3] = j + 0;
            indexArray[i + 4] = j + 2;
            indexArray[i + 5] = j + 3;
        }
        _this._indexArray = indexArray;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _this._indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, _this._indexArray, gl.STATIC_DRAW);
        return _this;
    }

    createClass(ElementsBatch, [{
        key: "_draw",
        value: function _draw(gl) {
            gl.drawElements(gl.TRIANGLES, this.arrayOffset / this.BATCH_FLOATS_PER_INDEX, gl.UNSIGNED_SHORT, 0);
        }
    }]);
    return ElementsBatch;
}(Batch);

var Attribute = function Attribute(type, size) {
    var instanced = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    classCallCheck(this, Attribute);

    this.type = type;
    this.size = size;
    this.instanced = instanced;
    this.location = null;
};
var Uniform = function Uniform(type, value) {
    classCallCheck(this, Uniform);

    this.type = type;
    this.value = value;
    this.location = null;
};
var Shader = function () {
    function Shader(renderer, vertSrc, fragSrc) {
        var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var uniforms = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        var maxTriangles = arguments[5];
        var elements = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        classCallCheck(this, Shader);

        this.name = "base shader";
        console.assert(renderer != null, "Renderer is null " + renderer);
        console.assert(vertSrc != null, "VertSrc is " + vertSrc);
        console.assert(vertSrc !== "", "VertSrc is empty");
        console.assert(fragSrc != null, "FragSrc is " + fragSrc);
        console.assert(fragSrc !== "", "FragSrc is empty");
        console.assert(attributes != null, "Attributes is " + attributes);
        console.assert(uniforms != null, "Uniforms is " + uniforms);
        console.assert(maxTriangles != null, "MaxTriangles is " + maxTriangles);
        console.assert(maxTriangles > 0, "MaxTriangles is <=0 : " + maxTriangles);
        console.assert(elements != null, "Elements is " + elements);
        this._renderer = renderer;
        this._program = this._compileProgram(renderer.gl, vertSrc, fragSrc);
        this.attributes = attributes;
        this.uniforms = uniforms;
        this.bindAttributeLocations();
        this.cacheUniformLocations();
        if (elements === false) {
            this.batch = new Batch(renderer, attributes, maxTriangles);
        } else {
            this.batch = new ElementsBatch(renderer, attributes, maxTriangles);
        }
    }

    createClass(Shader, [{
        key: "activate",
        value: function activate() {
            this._renderer.gl.useProgram(this._program);
        }
    }, {
        key: "bindAttributeLocations",
        value: function bindAttributeLocations() {
            var gl = this._renderer.gl;
            var attributes = this.attributes;
            var keys = Object.keys(attributes);
            var program = this._program;
            for (var i = 0, ilen = keys.length; i < ilen; i++) {
                gl.bindAttribLocation(program, i, keys[i]);
                attributes[keys[i]].location = i;
            }
        }
    }, {
        key: "cacheUniformLocations",
        value: function cacheUniformLocations() {
            var gl = this._renderer.gl;
            var uniforms = this.uniforms;
            var program = this._program;
            var keys = Object.keys(uniforms);
            for (var i = 0, ilen = keys.length; i < ilen; i++) {
                uniforms[keys[i]].location = gl.getUniformLocation(program, keys[i]);
            }
        }
    }, {
        key: "syncUniforms",
        value: function syncUniforms() {
            var gl = this._renderer.gl;
            var uniforms = this.uniforms;
            var keys = Object.keys(uniforms);
            for (var i = 0, ilen = keys.length; i < ilen; i++) {
                this._syncUniform(uniforms[keys[i]]);
            }
        }
    }, {
        key: "_syncUniform",
        value: function _syncUniform(uniform) {
            var location = uniform.location;
            var value = uniform.value;
            switch (uniform.type) {
                case "b":
                    this._renderer.gl.uniform1i(location, value === true ? 1 : 0);
                    break;
                case "i1":
                case "1i":
                    this._renderer.gl.uniform1i(location, value);
                    break;
                case "i2":
                case "2i":
                    this._renderer.gl.uniform2i(location, value.x, value.y);
                    break;
                case "i3":
                case "3i":
                    this._renderer.gl.uniform3i(location, value.x, value.y, value.z);
                    break;
                case "i4":
                case "4i":
                    this._renderer.gl.uniform4i(location, value.x, value.y, value.z, value.w);
                    break;
                case "f1":
                case "1f":
                    this._renderer.gl.uniform1f(location, value);
                    break;
                case "f2":
                case "2f":
                    this._renderer.gl.uniform2f(location, value.x, value.y);
                    break;
                case "f3":
                case "3f":
                    this._renderer.gl.uniform3f(location, value.x, value.y, value.z);
                    break;
                case "f4":
                case "4f":
                    this._renderer.gl.uniform4f(location, value.x, value.y, value.z, value.w);
                    break;
                case "mat3":
                    this._renderer.gl.uniformMatrix3fv(location, false, value);
                    break;
                case "t":
                    var texture = value;
                    var idx = this._renderer.textureManager.bindTexture(texture, 0);
                    this._renderer.gl.uniform1i(location, idx);
                    break;
                default:
                    console.error("Shader -- unknown uniform type: ", uniform.type, " -- value: ", value);
                    return;
            }
        }
    }, {
        key: "_recompileProgram",
        value: function _recompileProgram(vertSrc, fragSrc) {
            var gl = this._renderer.gl;
            var newProgram = this._compileProgram(gl, vertSrc, fragSrc);
            if (newProgram === null) {
                console.warn("Failed to recompile program.");
                return false;
            }
            gl.deleteProgram(this._program);
            this._program = newProgram;
            return true;
        }
    }, {
        key: "_compileProgram",
        value: function _compileProgram(gl, vertSrc, fragSrc) {
            var vert = this._compileShader(gl, vertSrc, gl.VERTEX_SHADER);
            var frag = this._compileShader(gl, fragSrc, gl.FRAGMENT_SHADER);
            var program = gl.createProgram();
            gl.attachShader(program, vert);
            gl.attachShader(program, frag);
            gl.linkProgram(program);
            gl.deleteShader(vert);
            gl.deleteShader(frag);
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error("Failed to link program");
                console.warn("Validate status: ", gl.getProgramParameter(program, gl.VALIDATE_STATUS));
                console.warn("Error: ", gl.getError());
                console.warn("ProgramInfoLog: ", gl.getProgramInfoLog(program));
                gl.deleteProgram(program);
                throw new Error();
            }
            return program;
        }
    }, {
        key: "_compileShader",
        value: function _compileShader(gl, src, type) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {
                console.error("Failed to compile shader");
                console.warn("ShaderInfoLog: ", gl.getShaderInfoLog(shader));
                console.log(src);
                gl.deleteShader(shader);
                throw new Error();
            }
            return shader;
        }
    }]);
    return Shader;
}();

var SHADER_BRUSH_VERT = ["precision highp float;", "attribute vec2 aPosition;", "varying vec2 vPosition;", "void main() {", "	vPosition = aPosition;", "	gl_Position = vec4(aPosition, 0.0, 1.0);", "}"].join("\n");
var SHADER_BRUSH_FRAG = ["precision highp float;", "varying vec2 vPosition;", "uniform float uSoftness;", "uniform float uGamma;", "void main() {", "	float radius = 1.0 - uSoftness;", "	float dist = sqrt(dot(vPosition, vPosition));", "	float a = 1.0 - smoothstep(radius, radius + uSoftness, dist);", "	gl_FragColor = vec4(vec3(0.0), pow(a, uGamma));", "}"].join("\n");
var DefaultBrushShader = function (_Shader) {
    inherits(DefaultBrushShader, _Shader);

    function DefaultBrushShader(renderer, softness, gamma) {
        classCallCheck(this, DefaultBrushShader);

        var _this = possibleConstructorReturn(this, (DefaultBrushShader.__proto__ || Object.getPrototypeOf(DefaultBrushShader)).call(this, renderer, SHADER_BRUSH_VERT, SHADER_BRUSH_FRAG, {
            aPosition: new Attribute(renderer.gl.FLOAT, 2)
        }, {
            uSoftness: new Uniform("1f", softness),
            uGamma: new Uniform("1f", gamma)
        }, 2));

        _this.name = "brush shader";
        return _this;
    }

    createClass(DefaultBrushShader, [{
        key: "softness",
        set: function set$$1(texture) {
            this.uniforms["uSoftness"].value = texture;
        },
        get: function get$$1() {
            return this.uniforms["uSoftness"].value;
        }
    }, {
        key: "gamma",
        set: function set$$1(texture) {
            this.uniforms["uGamma"].value = texture;
        },
        get: function get$$1() {
            return this.uniforms["uGamma"].value;
        }
    }]);
    return DefaultBrushShader;
}(Shader);

var SHADER_FUNC_smootherstep = ["float smootherstep(float edge0, float edge1, float x) {", "	x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);", "	return x * x * x * (x * (x * 6.0 - 15.0) + 10.0);", "}"].join("\n");
var SHADER_FUNC_hsv2rgb = ["vec3 hsv2rgb(vec3 c) {", "	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);", "	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);", "	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);", "}", "vec4 hsv2rgb(vec4 c) {", "	return vec4(hsv2rgb(c.rgb), c.a);", "}"].join("\n");
var SHADER_FUNC_rgb2hsv = ["vec3 rgb2hsv(vec3 c) {", "	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);", "	vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);", "	vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);", "	float d = q.x - min(q.w, q.y);", "	float e = 1.0e-10;", "	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);", "}"].join("\n");
var SHADER_DEFINE_PI = ["\n#ifndef PI", "	#define PI 3.14159265359", "#endif", "#ifndef TAU", "	#define TAU 6.283185307179586", "#endif\n"].join("\n");
var SHADER_FUNC_rand = ["float rand(float n) {", "	return fract(sin(n) * 43758.5453123);", "}", "float rand(vec2 n) {", "	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);", "}"].join("\n");
var SHADER_FUNC_pow = ["vec2 pow(vec2 vec, float power) {", "	return vec2(pow(vec.x, power), pow(vec.y, power));", "}", "vec3 pow(vec3 vec, float power) {", "	return vec3(pow(vec.x, power), pow(vec.y, power), pow(vec.z, power));", "}", "vec4 pow(vec4 vec, float power) {", "	return vec4(pow(vec.x, power), pow(vec.y, power), pow(vec.z, power), pow(vec.w, power));", "}"].join("\n");
var SHADER_FUNC_toGreyscale = ["float toGreyscale( in vec3 color ) {", "	return 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;", "}", "vec3 toGreyscale( in vec3 color ) {", "	return vec3(toGreyscale(color));", "}", "vec4 toGreyscale( in vec4 color ) {", "	return vec4(toGreyscale(color.rgb), color.a);", "}"].join("\n");
var SHADER_FUNC_sobelOperator = ["float sobelOperator() {", "	float alpha = 0.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(-stepSize.x,	-stepSize.y)).a * 3.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(0.0,			-stepSize.y)).a * 10.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(stepSize.x,	-stepSize.y)).a * 3.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(-stepSize.x,	0.0)).a * 10.0;", "	alpha += texture2D(uSampler, vTextureCoord + vec2(0.0,			0.0)).a * 52.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(stepSize.x,	0.0)).a * 10.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(-stepSize.x,	stepSize.y)).a * 3.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(0.0,			stepSize.y)).a * 10.0;", "	alpha -= texture2D(uSampler, vTextureCoord + vec2(stepSize.x,	stepSize.y)).a * 3.0;", "	return alpha;", "}"].join("\n");

var SHADER_DRAWPOINT_VERT = ["precision highp float;", SHADER_DEFINE_PI, "attribute vec4 aColor;", "attribute vec2 aTextureCoord;", "attribute vec2 aPosition;", "attribute vec2 aCenter;", "attribute float aRotation;", "uniform vec2 uResolution;", "varying vec4 vColor;", "varying vec2 vTextureCoord;", "void main() {", "	vColor = vec4(aColor.rgb * aColor.a, aColor.a);", "	vTextureCoord = aTextureCoord;", "	float rotation = aRotation;", "	float c = cos(rotation);", "	float s = sin(rotation);", "	vec2 rotatedPos = vec2(aPosition.x * c + aPosition.y * s, aPosition.x * -s + aPosition.y * c);", "	vec2 pos = aCenter + rotatedPos;", "	pos /= uResolution;", "	pos.x = pos.x * 2.0 - 1.0;", "	pos.y = pos.y * -2.0 + 1.0;", "	gl_Position = vec4(pos, 0.0, 1.0);", "}"].join("\n");
var SHADER_DRAWPOINT_FRAG = ["precision highp float;", "varying vec4 vColor;", "varying vec2 vTextureCoord;", "uniform sampler2D uBrushTexture;", "void main() {", "	float a = texture2D(uBrushTexture, vTextureCoord).a;", "	gl_FragColor = vec4(vColor * a);", "}"].join("\n");
var DrawPointShader = function (_Shader) {
    inherits(DrawPointShader, _Shader);

    function DrawPointShader(renderer, texture, maxElements) {
        classCallCheck(this, DrawPointShader);

        var _this = possibleConstructorReturn(this, (DrawPointShader.__proto__ || Object.getPrototypeOf(DrawPointShader)).call(this, renderer, SHADER_DRAWPOINT_VERT, SHADER_DRAWPOINT_FRAG, {
            aColor: new Attribute(renderer.gl.FLOAT, 4),
            aTextureCoord: new Attribute(renderer.gl.FLOAT, 2),
            aPosition: new Attribute(renderer.gl.FLOAT, 2),
            aCenter: new Attribute(renderer.gl.FLOAT, 2),
            aRotation: new Attribute(renderer.gl.FLOAT, 1)
        }, {
            uBrushTexture: new Uniform("t", texture),
            uResolution: new Uniform("2f", null)
        }, maxElements, false));

        _this.name = "drawpoint shader";
        _this.resolution = Vec2.create(renderer.canvas.width, renderer.canvas.height);
        return _this;
    }

    createClass(DrawPointShader, [{
        key: "brushTexture",
        set: function set$$1(texture) {
            this.uniforms["uBrushTexture"].value = texture;
        },
        get: function get$$1() {
            return this.uniforms["uBrushTexture"].value;
        }
    }, {
        key: "resolution",
        get: function get$$1() {
            return this.uniforms["uResolution"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uResolution"].value = value;
        }
    }]);
    return DrawPointShader;
}(Shader);

var SHADER_SPRITE_SHADER_VERT = ["precision highp float;", "attribute vec2 aPosition;", "attribute vec2 aTextureCoord;", "uniform vec2 uResolution;", "uniform float uScale;", "uniform float uRotation;", "varying vec2 vTextureCoord;", "void main() {", "	vTextureCoord = aTextureCoord / uResolution;", "   vec2 csCoord = (aPosition / uResolution) * 2.0 - 1.0;", "	gl_Position = vec4(csCoord, 0.0, 1.0);", "}"].join("\n");
var SHADER_SPRITE_SHADER_FRAG = ["precision highp float;", "varying vec2 vTextureCoord;", "uniform sampler2D uTexture;", "void main() {", "	vec4 pixel = texture2D(uTexture, vTextureCoord);", "	gl_FragColor = pixel;", "}"].join("\n");
var SpriteShader = function (_Shader) {
    inherits(SpriteShader, _Shader);

    function SpriteShader(renderer) {
        classCallCheck(this, SpriteShader);

        var _this = possibleConstructorReturn(this, (SpriteShader.__proto__ || Object.getPrototypeOf(SpriteShader)).call(this, renderer, SHADER_SPRITE_SHADER_VERT, SHADER_SPRITE_SHADER_FRAG, {
            aPosition: new Attribute(renderer.gl.FLOAT, 2),
            aTextureCoord: new Attribute(renderer.gl.FLOAT, 2)
        }, {
            uTexture: new Uniform("t", null),
            uResolution: new Uniform("2f", Vec2.create(renderer.canvas.width, renderer.canvas.height)),
            uScale: new Uniform("1f", 1),
            uRotation: new Uniform("1f", 0)
        }, 2));

        _this.name = "sprite shader";
        return _this;
    }

    createClass(SpriteShader, [{
        key: "texture",
        get: function get$$1() {
            return this.uniforms["uTexture"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uTexture"].value = value;
        }
    }, {
        key: "scale",
        get: function get$$1() {
            return this.uniforms["uScale"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uScale"].value = value;
        }
    }, {
        key: "rotation",
        get: function get$$1() {
            return this.uniforms["uRotation"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uRotation"].value = value;
        }
    }, {
        key: "resolution",
        get: function get$$1() {
            return this.uniforms["uResolution"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uResolution"].value = value;
        }
    }]);
    return SpriteShader;
}(Shader);

var SHADER_OUTPUT_SHADER_VERT = ["precision highp float;", "attribute vec2 aPosition;", "attribute vec2 aTextureCoord;", "uniform vec2 uResolution;", "varying vec2 vTextureCoord;", "void main() {", "	vTextureCoord = aTextureCoord / uResolution;", "   vec2 csCoord = (aPosition / uResolution) * 2.0 - 1.0;", "	gl_Position = vec4(csCoord, 0.0, 1.0);", "}"].join("\n");
function SHADER_OUTPUT_SHADER_FRAG(gamma) {
    return ["precision highp float;", "varying vec2 vTextureCoord;", "uniform sampler2D uTexture;", "void main() {", "	vec4 pixel = texture2D(uTexture, vTextureCoord);", "	gl_FragColor = pow(pixel, vec4(" + (1 / gamma).toFixed(6) + "));", "}"].join("\n");
}

var OutputShader = function (_Shader) {
    inherits(OutputShader, _Shader);

    function OutputShader(renderer, gamma) {
        var texture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        classCallCheck(this, OutputShader);

        var _this = possibleConstructorReturn(this, (OutputShader.__proto__ || Object.getPrototypeOf(OutputShader)).call(this, renderer, SHADER_OUTPUT_SHADER_VERT, SHADER_OUTPUT_SHADER_FRAG(gamma), {
            aPosition: new Attribute(renderer.gl.FLOAT, 2),
            aTextureCoord: new Attribute(renderer.gl.FLOAT, 2)
        }, {
            uTexture: new Uniform("t", texture),
            uResolution: new Uniform("2f", Vec2.create())
        }, 2));

        _this.name = "output shader";
        _this._gamma = gamma;
        return _this;
    }

    createClass(OutputShader, [{
        key: "gamma",
        get: function get$$1() {
            return this._gamma;
        },
        set: function set$$1(value) {
            if (true === this._recompileProgram(SHADER_OUTPUT_SHADER_VERT, SHADER_OUTPUT_SHADER_FRAG(value))) {
                this._gamma = value;
            }
        }
    }, {
        key: "texture",
        get: function get$$1() {
            return this.uniforms["uTexture"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uTexture"].value = value;
        }
    }, {
        key: "resolution",
        get: function get$$1() {
            return this.uniforms["uResolution"].value;
        },
        set: function set$$1(value) {
            this.uniforms["uResolution"].value = value;
        }
    }]);
    return OutputShader;
}(Shader);

var ShaderContainer = function ShaderContainer(renderer) {
    var _this = this;

    classCallCheck(this, ShaderContainer);

    this._onSoftnessChanged = function (value) {
        return _this.brushShader.softness = value;
    };
    this._onGammaChanged = function (value) {
        _this.outputShader.gamma = value;
        _this.brushShader.gamma = value;
    };
    this._onCanvasWidthChanged = function (value) {
        return _this.spriteShader.resolution = _this.spriteShader.resolution.withX(value);
    };
    this._onCanvasHeightChanged = function (value) {
        return _this.spriteShader.resolution = _this.spriteShader.resolution.withY(value);
    };
    this.brushShader = new DefaultBrushShader(renderer, getValue(ID$1.BrushSoftness), getValue(ID$1.Gamma));
    this.drawPointShader = new DrawPointShader(renderer, null, getValue(ID$1.RenderingMaxDrawPoints));
    this.spriteShader = new SpriteShader(renderer);
    this.outputShader = new OutputShader(renderer, getValue(ID$1.Gamma));
    subscribe$1(ID$1.Gamma, this._onGammaChanged);
    subscribe$1(ID$1.BrushSoftness, this._onSoftnessChanged);
    subscribe$1(ID$1.CanvasWidth, this._onCanvasWidthChanged);
    subscribe$1(ID$1.CanvasHeight, this._onCanvasHeightChanged);
};

var BoundTexture = function () {
    function BoundTexture(texture, textureIndex, priority, time) {
        classCallCheck(this, BoundTexture);

        this.texture = texture;
        this.textureIndex = textureIndex;
        this.priority = priority;
        this.time = time;
    }

    createClass(BoundTexture, [{
        key: "isLessThan",
        value: function isLessThan(rhs) {
            if (this.priority !== rhs.priority) {
                return this.priority < rhs.priority;
            }
            return this.time < rhs.time;
        }
    }]);
    return BoundTexture;
}();
var TextureManager = function () {
    function TextureManager(renderer) {
        classCallCheck(this, TextureManager);

        this.TEXTURE_SLOTS = 32;
        this._activeTextures = 0;
        console.assert(renderer != null);
        var textures = new Array(this.TEXTURE_SLOTS);
        for (var i = 0, ilen = this.TEXTURE_SLOTS; i < ilen; i++) {
            textures[i] = new BoundTexture(null, i, 0, 0);
        }
        this._boundTextures = textures;
        this._renderer = renderer;
    }

    createClass(TextureManager, [{
        key: "bindTexture",
        value: function bindTexture(texture, priority) {
            console.assert(texture != null);
            console.assert(priority >= 0);
            var idx = this.getIndexOf(texture);
            var bTex = void 0;
            if (idx !== -1) {
                bTex = this._boundTextures[idx];
            } else {
                if (this._activeTextures < this.TEXTURE_SLOTS) {
                    bTex = this.getNextBoundTexture();
                } else {
                    bTex = this.getLowestPriorityBoundTexture();
                }
                bTex.texture = texture;
                idx = this.getIndexOf(texture);
                var gl = this._renderer.gl;
                gl.activeTexture(gl.TEXTURE0 + bTex.textureIndex);
                gl.bindTexture(gl.TEXTURE_2D, this._boundTextures[idx].texture.textureWGL);
            }
            bTex.priority = priority;
            bTex.time = Date.now();
            return bTex.textureIndex;
        }
    }, {
        key: "getNextBoundTexture",
        value: function getNextBoundTexture() {
            return this._boundTextures[this._activeTextures++];
        }
    }, {
        key: "getLowestPriorityBoundTexture",
        value: function getLowestPriorityBoundTexture() {
            var bTextures = this._boundTextures;
            var lowest = bTextures[0];
            for (var i = 1, ilen = bTextures.length; i < ilen; i++) {
                if (lowest.isLessThan(bTextures[i])) {
                    lowest = bTextures[i];
                }
            }
            return lowest;
        }
    }, {
        key: "getIndexOf",
        value: function getIndexOf(texture) {
            console.assert(texture != null);
            var bTextures = this._boundTextures;
            for (var i = 0, ilen = bTextures.length; i < ilen; i++) {
                if (bTextures[i].texture === texture) {
                    return i;
                }
            }
            return -1;
        }
    }]);
    return TextureManager;
}();

var BLEND_MODE_VALUES = {};
BLEND_MODE_VALUES[BlendMode.Normal] = [WebGLRenderingContext.ONE, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA];
BLEND_MODE_VALUES[BlendMode.Erase] = [WebGLRenderingContext.ZERO, WebGLRenderingContext.ONE_MINUS_SRC_ALPHA];
var Renderer = function () {
    function Renderer(canvas, webGlAttributes) {
        classCallCheck(this, Renderer);

        this.currentShader = null;
        this.currentFrameBuffer = null;
        console.assert(canvas != null, "Canvas is " + canvas);
        console.assert(webGlAttributes != null, "WebGlAttributes is " + webGlAttributes);
        this.canvas = canvas;
        var gl = canvas.getContext("webgl", webGlAttributes) || canvas.getContext("experimental-webgl", webGlAttributes);
        this.gl = gl;
        if (gl === null) {
            throw new Error("Failed to get WebGL context");
        }
        gl.disable(gl.DEPTH_TEST);
        gl.enable(gl.BLEND);
        this.blendMode = BlendMode.Normal;
        if (gl.getExtension("OES_texture_float") === null) {
            throw new Error("Failed to enable the OES_texture_float extension");
        }
        if (gl.getExtension("OES_texture_float_linear") === null) {
            throw new Error("Failed to enable the OES_texture_float_linear extension");
        }
        this._setViewPort(0, 0, canvas.width, canvas.height);
        this.textureManager = new TextureManager(this);
        this.shaders = new ShaderContainer(this);
    }

    createClass(Renderer, [{
        key: "useFrameBuffer",
        value: function useFrameBuffer(texture) {
            this._useFrameBuffer(texture !== null ? texture.framebuffer : null);
        }
    }, {
        key: "useShader",
        value: function useShader(shader) {
            console.assert(shader != null, "Shader is " + shader);
            if (this.currentShader !== shader) {
                shader.activate();
                this.currentShader = shader;
            }
        }
    }, {
        key: "flushShaderToTexture",
        value: function flushShaderToTexture(shader, texture) {
            console.assert(shader != null, "Shader is " + shader);
            var id = texture ? texture.id : "< canvas >";
            this.useShader(shader);
            this.useFrameBuffer(texture);
            shader.syncUniforms();
            shader.batch.flush();
        }
    }, {
        key: "renderSpriteToTexture",
        value: function renderSpriteToTexture(shader, sprite, texture) {
            console.assert(shader != null, "Shader is " + shader);
            console.assert(sprite != null, "Sprite is " + sprite);
            console.assert(sprite.texture != null, "Sprite texture is " + sprite.texture);
            sprite.addToBatch(shader.batch);
            shader.texture = sprite.texture;
            shader.scale = sprite.scale;
            shader.rotation = sprite.rotation;
            this.flushShaderToTexture(shader, texture);
        }
    }, {
        key: "setViewportForSprite",
        value: function setViewportForSprite(sprite) {
            console.assert(sprite != null, "Sprite is " + sprite);
            var vpArea = this.viewportArea;
            var size = sprite.texture.size;
            if (vpArea.width === size.x && vpArea.height === size.y && vpArea.x === 0 && vpArea.y === 0) {
                return;
            }
            this._setViewPort(0, 0, size.x, size.y);
        }
    }, {
        key: "setViewport",
        value: function setViewport(x, y, width, height) {
            var vpArea = this.viewportArea;
            if (vpArea.width === width && vpArea.height === height && vpArea.x === x && vpArea.y === y) {
                return;
            }
            this._setViewPort(x, y, width, height);
        }
    }, {
        key: "clear",
        value: function clear() {
            var texture = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (texture != null) {
                this.useFrameBuffer(texture);
            }
            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);
            this.gl.clear(this.gl.COLOR_BUFFER_BIT);
        }
    }, {
        key: "_useFrameBuffer",
        value: function _useFrameBuffer(fb) {
            if (fb === this.currentFrameBuffer) {
                return;
            }
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb);
            this.currentFrameBuffer = fb;
        }
    }, {
        key: "_setViewPort",
        value: function _setViewPort(x, y, width, height) {
            this.gl.viewport(x, y, width, height);
            this.viewportArea = Vec4.create(x, y, width, height);
        }
    }, {
        key: "blendMode",
        get: function get$$1() {
            return this._blendMode;
        },
        set: function set$$1(mode) {
            if (mode === this._blendMode) {
                return;
            }
            this.gl.blendFunc(BLEND_MODE_VALUES[mode][0], BLEND_MODE_VALUES[mode][1]);
            this._blendMode = mode;
        }
    }]);
    return Renderer;
}();

var Sprite = function () {
    function Sprite(texture) {
        classCallCheck(this, Sprite);

        this.position = Vec2.create();
        this.scale = 1;
        this.rotation = 0;
        this.crop = null;
        console.assert(texture != null, "Texture is " + texture);
        this.texture = texture;
    }

    createClass(Sprite, [{
        key: "addToBatch",
        value: function addToBatch(batch) {
            console.assert(batch != null, "Batch is " + batch);
            var x = this.position.x;
            var y = this.position.y;
            var width = this.texture.size.x;
            var height = this.texture.size.y;
            var crop = this.crop;
            var centerX = x + width * .5;
            var centerY = y + height * .5;
            var halfWidth = width * this.scale * .5;
            var halfHeight = height * this.scale * .5;
            var vertexX0 = centerX - halfWidth;
            var vertexY0 = centerY - halfHeight;
            var vertexX1 = centerX + halfWidth;
            var vertexY1 = centerY + halfHeight;
            var textureX0 = void 0;
            var textureY0 = void 0;
            var textureX1 = void 0;
            var textureY1 = void 0;
            if (crop === null) {
                textureX0 = x;
                textureY0 = y;
                textureX1 = textureX0 + width;
                textureY1 = textureY0 + height;
            } else {
                textureX0 = crop.x + x;
                textureY0 = crop.y + y;
                textureX1 = textureX0 + crop.width;
                textureY1 = textureY0 + crop.height;
            }
            var array = batch.array;
            var offset = batch.arrayOffset;
            array[offset++] = vertexX0;
            array[offset++] = vertexY0;
            array[offset++] = textureX0;
            array[offset++] = textureY0;
            array[offset++] = vertexX0;
            array[offset++] = vertexY1;
            array[offset++] = textureX0;
            array[offset++] = textureY1;
            array[offset++] = vertexX1;
            array[offset++] = vertexY0;
            array[offset++] = textureX1;
            array[offset++] = textureY0;
            array[offset++] = vertexX0;
            array[offset++] = vertexY1;
            array[offset++] = textureX0;
            array[offset++] = textureY1;
            array[offset++] = vertexX1;
            array[offset++] = vertexY0;
            array[offset++] = textureX1;
            array[offset++] = textureY0;
            array[offset++] = vertexX1;
            array[offset++] = vertexY1;
            array[offset++] = textureX1;
            array[offset++] = textureY1;
            batch.arrayOffset = offset;
        }
    }]);
    return Sprite;
}();

var Layer = function (_Sprite) {
    inherits(Layer, _Sprite);

    function Layer(texture, id) {
        classCallCheck(this, Layer);

        var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, texture));

        console.assert(texture != null);
        console.assert(id >= 0);
        _this.texture = texture;
        _this.id = id;
        _this.name = ["Layer ", id].join("");
        return _this;
    }

    return Layer;
}(Sprite);

var Texture = function () {
    function Texture(renderer) {
        var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
        var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
        classCallCheck(this, Texture);

        console.assert(renderer != null, "Renderer is " + renderer);
        console.assert(width > 0, "Width is 0 or less: " + width);
        console.assert(height > 0, "Height is 0 or less: " + height);
        this._renderer = renderer;
        this.size = Vec2.create(width, height);
        this.id = Texture._nextId++;
        var gl = renderer.gl;
        this.textureWGL = gl.createTexture();
        this.framebuffer = gl.createFramebuffer();
        this.updateSize();
        renderer.useFrameBuffer(this);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.textureWGL, 0);
    }

    createClass(Texture, [{
        key: "updateSize",
        value: function updateSize() {
            var gl = this._renderer.gl;
            var size = this.size;
            gl.bindTexture(gl.TEXTURE_2D, this.textureWGL);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size.x, size.y, 0, gl.RGBA, gl.FLOAT, null);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        }
    }]);
    return Texture;
}();
Texture._nextId = 0;

var LayerStack = function () {
    function LayerStack(renderer) {
        classCallCheck(this, LayerStack);

        this._nextLayerId = 0;
        this.stack = [];
        this._renderer = renderer;
    }

    createClass(LayerStack, [{
        key: "newLayer",
        value: function newLayer(index) {
            console.assert(index >= 0);
            var texture = new Texture(this._renderer, this._renderer.canvas.width, this._renderer.canvas.height);
            var layer = new Layer(texture, this._nextLayerId++);
            this.stack.splice(index, 0, layer);
        }
    }, {
        key: "moveLayerToIdx",
        value: function moveLayerToIdx(fromIndex, toIndex) {
            console.assert(fromIndex >= 0);
            console.assert(toIndex >= 0);
            console.warn("Not implemented");
        }
    }, {
        key: "removeLayer",
        value: function removeLayer(index) {
            console.assert(index >= 0);
            return this.stack.splice(index, 1)[0];
        }
    }, {
        key: "insertLayer",
        value: function insertLayer(layer, idx) {
            console.assert(layer != null);
            console.assert(idx >= 0);
            this.stack.splice(idx, 0, layer);
        }
    }]);
    return LayerStack;
}();

var LayersRenderer = function () {
    function LayersRenderer(renderer, layerStack) {
        classCallCheck(this, LayersRenderer);

        this._currentLayer = null;
        console.assert(renderer != null);
        console.assert(layerStack != null);
        this._renderer = renderer;
        this._layerStack = layerStack;
        var width = renderer.canvas.width;
        var height = renderer.canvas.height;
        this.combinedLayers = new Sprite(new Texture(renderer, width, height));
        this._layersBelow = new Sprite(new Texture(renderer, width, height));
        this._layersAbove = new Sprite(new Texture(renderer, width, height));
    }

    createClass(LayersRenderer, [{
        key: "update",
        value: function update(currentLayer) {
            console.assert(currentLayer != null);
            if (this._currentLayer === currentLayer) {
                return;
            }
            this._currentLayer = currentLayer;
            var renderer = this._renderer;
            var shader = renderer.shaders.spriteShader;
            var combined = this.combinedLayers;
            var stack = this._layerStack.stack;
            var currentLayerIdx = this._layerStack.stack.indexOf(currentLayer);
            var below = this._layersBelow;
            renderer.setViewportForSprite(below);
            for (var i = 0; i < currentLayerIdx; i++) {
                console.log("current layer idx", currentLayerIdx);
                renderer.renderSpriteToTexture(shader, stack[i], below.texture);
            }
            var above = this._layersAbove;
            renderer.setViewportForSprite(above);
            for (var _i = currentLayerIdx + 1, ilen = stack.length; _i < ilen; _i++) {
                renderer.renderSpriteToTexture(shader, stack[_i], above.texture);
            }
        }
    }, {
        key: "render",
        value: function render() {
            var renderer = this._renderer;
            var shader = renderer.shaders.spriteShader;
            var combined = this.combinedLayers;
            renderer.clear(combined.texture);
            renderer.setViewportForSprite(combined);
            renderer.renderSpriteToTexture(shader, this._layersBelow, combined.texture);
            renderer.renderSpriteToTexture(shader, this._currentLayer, combined.texture);
            renderer.renderSpriteToTexture(shader, this._layersAbove, combined.texture);
        }
    }]);
    return LayersRenderer;
}();

var DrawPoint = function () {
    function DrawPoint(position, size) {
        var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;

        var _this = this;

        var rotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.0;
        var color = arguments[4];
        classCallCheck(this, DrawPoint);

        this.position = position;
        this.size = size;
        this.scale = scale;
        this.rotation = rotation;
        this.color = color;
        this.withPosition = function (position) {
            return new DrawPoint(position, _this.size, _this.scale, _this.rotation, _this.color);
        };
        this.withSize = function (size) {
            return new DrawPoint(_this.position, size, _this.scale, _this.rotation, _this.color);
        };
        this.withScale = function (scale) {
            return new DrawPoint(_this.position, _this.size, scale, _this.rotation, _this.color);
        };
        this.withRotation = function (rotation) {
            return new DrawPoint(_this.position, _this.size, _this.scale, rotation, _this.color);
        };
        this.withColor = function (color) {
            return new DrawPoint(_this.position, _this.size, _this.scale, _this.rotation, color);
        };
        Object.freeze(this);
    }

    createClass(DrawPoint, [{
        key: "equal",
        value: function equal(rhs) {
            console.assert(rhs != null, "RHS is " + rhs);
            return this.position === rhs.position && this.size === rhs.size && this.scale === rhs.scale && this.rotation === rhs.rotation && this.color === rhs.color;
        }
    }, {
        key: "notEqual",
        value: function notEqual(rhs) {
            console.assert(rhs != null, "RHS is " + rhs);
            return this.equal(rhs) === false;
        }
    }]);
    return DrawPoint;
}();
function addDrawPointToBatch(drawPoints, batch) {
    console.assert(batch != null, "Batch is " + batch + "}");
    var array = batch.array;
    var offset = batch.arrayOffset;
    var color = void 0;
    var scaledSize = 0;
    var p0 = 0;
    var p1 = 0;
    var drawPoint = null;
    for (var i = 0, ilen = drawPoints.length; i < ilen; i++) {
        drawPoint = drawPoints[i];
        scaledSize = drawPoint.size * drawPoint.scale;
        p0 = -scaledSize / 2;
        p1 = p0 + scaledSize;
        color = drawPoint.color.toRgba();
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
        array[offset++] = color.a;
        array[offset++] = 0;
        array[offset++] = 0;
        array[offset++] = p0;
        array[offset++] = p0;
        array[offset++] = drawPoint.position.x;
        array[offset++] = drawPoint.position.y;
        array[offset++] = drawPoint.rotation;
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
        array[offset++] = color.a;
        array[offset++] = 0;
        array[offset++] = 1;
        array[offset++] = p0;
        array[offset++] = p1;
        array[offset++] = drawPoint.position.x;
        array[offset++] = drawPoint.position.y;
        array[offset++] = drawPoint.rotation;
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
        array[offset++] = color.a;
        array[offset++] = 1;
        array[offset++] = 0;
        array[offset++] = p1;
        array[offset++] = p0;
        array[offset++] = drawPoint.position.x;
        array[offset++] = drawPoint.position.y;
        array[offset++] = drawPoint.rotation;
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
        array[offset++] = color.a;
        array[offset++] = 0;
        array[offset++] = 1;
        array[offset++] = p0;
        array[offset++] = p1;
        array[offset++] = drawPoint.position.x;
        array[offset++] = drawPoint.position.y;
        array[offset++] = drawPoint.rotation;
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
        array[offset++] = color.a;
        array[offset++] = 1;
        array[offset++] = 0;
        array[offset++] = p1;
        array[offset++] = p0;
        array[offset++] = drawPoint.position.x;
        array[offset++] = drawPoint.position.y;
        array[offset++] = drawPoint.rotation;
        array[offset++] = color.r;
        array[offset++] = color.g;
        array[offset++] = color.b;
        array[offset++] = color.a;
        array[offset++] = 1;
        array[offset++] = 1;
        array[offset++] = p1;
        array[offset++] = p1;
        array[offset++] = drawPoint.position.x;
        array[offset++] = drawPoint.position.y;
        array[offset++] = drawPoint.rotation;
    }
    batch.arrayOffset = offset;
}

var CanvRenderingContext = function () {
    function CanvRenderingContext(canvas) {
        classCallCheck(this, CanvRenderingContext);

        console.assert(canvas != null, "Canvas is " + canvas);
        this.renderer = new Renderer(canvas, {
            alpha: true,
            depth: false,
            stencil: false,
            antialias: false,
            premultipliedAlpha: true,
            preserveDrawingBuffer: true,
            failIfMajorPerformanceCaveat: false
        });
        this.layerStack = new LayerStack(this.renderer);
        this.layerStack.newLayer(0);
        this.layerStack.newLayer(1);
        this.layer = this.layerStack.stack[0];
        this.layer.texture.updateSize();
        this._layersRenderer = new LayersRenderer(this.renderer, this.layerStack);
        this.blendMode = getValue(ID$1.RenderingBlendMode);
    }

    createClass(CanvRenderingContext, [{
        key: "renderDrawPoints",
        value: function renderDrawPoints(drawPoints, brushTexture) {
            console.assert(drawPoints != null, "DrawPoints is " + drawPoints);
            console.assert(brushTexture != null, "BrushTexture is " + brushTexture);
            var drawPointShader = this.renderer.shaders.drawPointShader;
            var renderer = this.renderer;
            var layer = this.layer;
            renderer.blendMode = this.blendMode;
            drawPointShader.brushTexture = brushTexture;
            addDrawPointToBatch(drawPoints, drawPointShader.batch);
            renderer.flushShaderToTexture(drawPointShader, layer.texture);
            this.renderLayers();
        }
    }, {
        key: "renderLayers",
        value: function renderLayers() {
            var renderer = this.renderer;
            var spriteShader = renderer.shaders.spriteShader;
            var outputShader = renderer.shaders.outputShader;
            var layersRenderer = this._layersRenderer;
            var combinedLayers = this._layersRenderer.combinedLayers;
            var blendMode = renderer.blendMode;
            renderer.blendMode = BlendMode.Normal;
            layersRenderer.update(this.layer);
            layersRenderer.render();
            combinedLayers.addToBatch(outputShader.batch);
            outputShader.resolution = combinedLayers.texture.size;
            outputShader.texture = combinedLayers.texture;
            renderer.setViewport(0, 0, renderer.canvas.width, renderer.canvas.height);
            renderer.useFrameBuffer(null);
            renderer.clear();
            renderer.flushShaderToTexture(outputShader, null);
        }
    }]);
    return CanvRenderingContext;
}();

var RNG = function () {
    function RNG() {
        var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();
        classCallCheck(this, RNG);

        this.seed(seed);
    }

    createClass(RNG, [{
        key: "seed",
        value: function seed(n) {
            this.x = n;
            this.y = 0;
            this.z = 0;
            this.w = 0;
            for (var i = 0; i < 16; i++) {
                this.nextInt();
            }
        }
    }, {
        key: "nextInt",
        value: function nextInt() {
            var t = this.x ^ this.x << 11;
            this.x = this.y;
            this.y = this.z;
            this.z = this.w;
            this.w ^= this.w >> 19 ^ t ^ t >> 8;
            return this.w;
        }
    }, {
        key: "next",
        value: function next() {
            return (this.nextInt() >>> 0) / ((1 << 30) * 2);
        }
    }]);
    return RNG;
}();

var TextureGenerator = function () {
    function TextureGenerator(renderer, standardBrushShader) {
        classCallCheck(this, TextureGenerator);

        this._renderer = renderer;
        this._shader = standardBrushShader;
    }

    createClass(TextureGenerator, [{
        key: "generate",
        value: function generate(texture) {
            var renderer = this._renderer;
            var gl = renderer.gl;
            var shader = this._shader;
            var batch = shader.batch;
            var array = batch.array;
            array[0] = -1;
            array[1] = -1;
            array[2] = -1;
            array[3] = 1;
            array[4] = 1;
            array[5] = -1;
            array[6] = -1;
            array[7] = 1;
            array[8] = 1;
            array[9] = -1;
            array[10] = 1;
            array[11] = 1;
            batch.arrayOffset = 12;
            renderer.setViewport(0, 0, texture.size.x, texture.size.y);
            renderer.clear(texture);
            renderer.flushShaderToTexture(shader, texture);
        }
    }]);
    return TextureGenerator;
}();

function getCanvasById(id) {
    var element = document.getElementById(id);
    return element instanceof HTMLCanvasElement ? element : null;
}



function isNumberType(value) {
    return isNaN(value) == false;
}
window.addEventListener('keydown', function (e) {
    if (e.keyCode === 123) {
        debugger;
    }
});

function subscribeToBrushEvents(brush) {
    subscribe(ID.BrushHue, function (value) {
        return brush.setHue(value);
    });
    subscribe(ID.BrushSaturation, function (value) {
        return brush.setSaturation(value);
    });
    subscribe(ID.BrushValue, function (value) {
        return brush.setValue(value);
    });
    subscribe(ID.BrushDensity, function (value) {
        return brush.setDensity(value);
    });
    subscribe(ID.BrushSoftness, function (value) {
        return brush.setSoftness(value);
    });
    subscribe(ID.BrushSpacing, function (value) {
        return brush.setSpacing(value);
    });
    subscribe(ID.BrushSize, function (value) {
        return brush.setSize(value);
    });
}
var Brush = function () {
    function Brush(renderer) {
        var _this = this;

        classCallCheck(this, Brush);

        this._spacing = getValue(ID$1.BrushSpacing);
        this._size = getValue(ID$1.BrushSize);
        this._softness = getValue(ID$1.BrushSoftness);
        this.getTexture = function () {
            return _this._texture;
        };
        this.getScale = function () {
            return _this._texture.size.x / _this._size;
        };
        this.getSpacingPx = function () {
            return _this._spacing * _this._size;
        };
        this.getColorRgba = function () {
            return _this._color.toRgba().powScalar(getValue(ID$1.Gamma));
        };
        console.assert(renderer != null);
        this._textureGenerator = new TextureGenerator(renderer, renderer.shaders.brushShader);
        var bTexSize = getValue(ID$1.BrushTextureSize);
        this._texture = new Texture(renderer, bTexSize, bTexSize);
        this._textureGenerator.generate(this._texture);
        this._color = Hsva.create(getValue(ID$1.BrushHue), getValue(ID$1.BrushSaturation), getValue(ID$1.BrushValue), getValue(ID$1.BrushDensity));
        this.setDensity(getValue(ID$1.BrushDensity));
        subscribeToBrushEvents(this);
    }

    createClass(Brush, [{
        key: "setHue",
        value: function setHue(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value <= 1 && value >= 0);
            setValue(ID$1.BrushHue, value);
            this._color = this._color.withH(value);
        }
    }, {
        key: "setSaturation",
        value: function setSaturation(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value <= 1 && value >= 0);
            setValue(ID$1.BrushSaturation, value);
            this._color = this._color.withS(value);
        }
    }, {
        key: "setValue",
        value: function setValue$$1(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value <= 1 && value >= 0);
            setValue(ID$1.BrushValue, value);
            this._color = this._color.withV(value);
        }
    }, {
        key: "setTexture",
        value: function setTexture(t) {
            console.assert(t != null);
            this._texture = t;
        }
    }, {
        key: "setDensity",
        value: function setDensity(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value <= 1 && value > 0);
            setValue(ID$1.BrushDensity, value);
            value = clamp(value, .01, 1);
            var adjustedValue = value * .1 + expostep(value) * .9;
            this._color = this._color.WithA(adjustedValue);
            setValue(ID$1.BrushAlpha, adjustedValue);
        }
    }, {
        key: "setSpacing",
        value: function setSpacing(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value <= 1 && value > 0);
            this._spacing = value;
            setValue(ID$1.BrushSpacing, value);
        }
    }, {
        key: "setSoftness",
        value: function setSoftness(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value <= 1 && value >= 0);
            setValue(ID$1.BrushSoftness, value);
            this._textureGenerator.generate(this._texture);
        }
    }, {
        key: "setSize",
        value: function setSize(value) {
            console.assert(isNumberType(value) === true);
            console.assert(value > 0);
            this._size = value;
            setValue(ID$1.BrushSize, value);
        }
    }]);
    return Brush;
}();

var InputPositionData = function InputPositionData(position, pressure, tilt) {
    classCallCheck(this, InputPositionData);

    this.position = position;
    this.pressure = pressure;
    this.tilt = tilt;
    Object.freeze(this);
};
var InputMods = function InputMods(shift, alt, ctrl) {
    classCallCheck(this, InputMods);

    this.shift = shift;
    this.alt = alt;
    this.ctrl = ctrl;
    Object.freeze(this);
};
var InputData = function InputData(source, whichKey, type, mods, positionData) {
    classCallCheck(this, InputData);

    this.source = source;
    this.whichKey = whichKey;
    this.type = type;
    this.mods = mods;
    this.positionData = positionData;
    Object.freeze(this);
};

var InputCapture = function () {
    function InputCapture(canvas) {
        var _this = this;

        classCallCheck(this, InputCapture);

        this._mouseDown = false;
        this._onPointerDown = function (ev) {
            if (ev.button !== 0) {
                return;
            }
            _this._mouseDown = true;
            var data = _this.getInputData(ev, 0, 0);
            broadcast(ID.PointerDown, data);
        };
        this._onPointerMove = function (ev) {
            var data = _this.getInputData(ev, 2, 0);
            broadcast(ID.PointerMove, data);
            if (_this._mouseDown === true) {
                broadcast(ID.PointerDrag, data);
            }
        };
        this._onPointerUp = function (ev) {
            _this._mouseDown = false;
            var data = _this.getInputData(ev, 1, 0);
            broadcast(ID.PointerUp, data);
        };
        this._canvas = canvas;
        this.updateCanvasPosition();
        canvas.addEventListener("pointerdown", this._onPointerDown);
        document.body.addEventListener("pointermove", this._onPointerMove);
        document.body.addEventListener("pointerup", this._onPointerUp);
        canvas.addEventListener("resize", function () {
            return _this.updateCanvasPosition();
        });
        canvas.addEventListener("reposition", function () {
            return _this.updateCanvasPosition();
        });
        window.addEventListener("scroll", function () {
            return _this.updateCanvasPosition();
        });
    }

    createClass(InputCapture, [{
        key: "getInputData",
        value: function getInputData(ev, inputType, src) {
            var x = ev.clientX - this._canvasPos.x;
            var y = ev.clientY - this._canvasPos.y;
            var positionData = void 0;
            if (ev.pointerType !== "mouse") {
                positionData = new InputPositionData(Vec2.create(x, y), ev.pressure, Vec2.create(ev.tiltX, ev.tiltY));
            } else {
                positionData = new InputPositionData(Vec2.create(x, y), 1, Vec2.create(0, 0));
            }
            var mods = new InputMods(ev.shiftKey, ev.altKey, ev.ctrlKey);
            return new InputData(src, ev.which, inputType, mods, positionData);
        }
    }, {
        key: "updateCanvasPosition",
        value: function updateCanvasPosition() {
            var bounds = this._canvas.getBoundingClientRect();
            this._canvasPos = Vec2.create(bounds.left, bounds.top);
        }
    }]);
    return InputCapture;
}();

function interpolatorGenerator(spacingThresholdPx) {
    return function (start) {
        return function (end) {
            console.assert(end != null, "End is " + end);
            var results = interpolationFunction2(spacingThresholdPx, start, end);
            Object.freeze(results);
            return results;
        };
    };
}
function getPercentagesToAdd(spacing, start, end) {
    var arr = new Array();
    var endSpacing = Math.max(spacing * end.scale);
    var endX = end.position.x;
    var endY = end.position.y;
    var totalDist = Vec2.distance(start.position, end.position);
    var dist = totalDist;
    var p = .1;
    var x = start.position.x;
    var y = start.position.y;
    var scale = start.scale;
    var previous = start;
    while (dist > endSpacing && p > 0) {
        p = spacing * start.scale / dist;
        x += p * (endX - x);
        y += p * (endY - y);
        scale += p * (end.scale - scale);
        start = new DrawPoint(Vec2.create(x, y), start.size, scale, undefined, undefined);
        if (previous != null && start.notEqual(previous)) {
            arr.push(dist / totalDist);
            previous = start;
        }
        dist = Vec2.distance(start.position, end.position);
    }
    return arr.reverse();
}
function interpolationFunction2(spacing, start, end) {
    var percentages = getPercentagesToAdd(spacing, start, end);
    var funcs = getFunctions(start, end);
    return percentages.map(function (p) {
        return new DrawPoint(funcs.position(p), end.size, funcs.scale(p), funcs.rotation(p), funcs.color(p));
    });
}
function getFunctions(start, end) {
    return {
        position: arithmeticInterpFunc(start.position, end.position),
        scale: numberInterpFunc(start.scale, end.scale),
        rotation: numberInterpFunc(start.rotation, end.rotation),
        color: arithmeticInterpFunc(start.color.toRgba(), end.color.toRgba())
    };
}
function numberInterpFunc(start, end) {
    var delta = end - start;
    if (delta === 0) {
        return function () {
            return start;
        };
    }
    return function (p) {
        return start + delta * p;
    };
}
function arithmeticInterpFunc(start, end) {
    var delta = end.subtract(start);
    if (delta.isDefault()) {
        return function (p) {
            return start;
        };
    }
    return function (p) {
        return start.add(delta.multiplyScalar(p));
    };
}

var RenderingCoordinator = function () {
    function RenderingCoordinator(renderCallback) {
        var _this = this;

        classCallCheck(this, RenderingCoordinator);

        this._requestId = -1;
        this._render = function () {
            _this._renderCallback();
            _this._requestId = -1;
        };
        console.assert(renderCallback != null, "RenderCallback is " + renderCallback);
        this._renderCallback = renderCallback;
    }

    createClass(RenderingCoordinator, [{
        key: "requestRender",
        value: function requestRender() {
            if (this._requestId === -1) {
                this._requestId = requestAnimationFrame(this._render);
            }
        }
    }, {
        key: "forceRender",
        value: function forceRender() {
            if (this._requestId >= 0) {
                cancelAnimationFrame(this._requestId);
            }
            this._render();
        }
    }]);
    return RenderingCoordinator;
}();

var Tools;
(function (Tools) {
    Tools[Tools["Brush"] = 0] = "Brush";
    Tools[Tools["Eraser"] = 1] = "Eraser";
    Tools[Tools["Blur"] = 2] = "Blur";
})(Tools || (Tools = {}));

var DEFAULT_SETTINGS = {
    CanvasWidth: 1000,
    CanvasHeight: 1000,
    Gamma: 2.2,
    ToolId: 0,
    BrushTextureSize: 1000,
    BrushSize: 120,
    BrushSoftness: 0.7,
    BrushSpacing: 0.05,
    BrushDensity: 0.5,
    BrushHue: 0.8,
    BrushSaturation: 0.9,
    BrushValue: 0.8,
    RenderingMaxDrawPoints: 10000,
    RenderingBlendMode: BlendMode.Normal
};
var dotsPerFrame = 100;
var frames = 0;
function initSettingsValues() {
    for (var i = 0, ilen = Object.keys(DEFAULT_SETTINGS).length; i < ilen; i++) {
        setValue(i, DEFAULT_SETTINGS[ID$1[i]]);
    }
}
var rng = void 0;
var canvas = void 0;
var renderingContext = void 0;
var inputCapture = void 0;
var interpGen = void 0;
var interpolator = void 0;
var dpp = Array();
var renderingCoordinator = void 0;
var brush = void 0;
function start() {
    rng = new RNG(1);
    canvas = getCanvasById("paintingArea");
    canvas.width = getValue(ID$1.CanvasWidth);
    canvas.height = getValue(ID$1.CanvasHeight);
    renderingContext = new CanvRenderingContext(canvas);
    inputCapture = new InputCapture(canvas);
    brush = new Brush(renderingContext.renderer);
    interpGen = interpolatorGenerator(brush.getSpacingPx());
    renderingCoordinator = new RenderingCoordinator(_render);
    subscribe$1(ID$1.BrushSpacing, function (n) {
        interpGen = interpolatorGenerator(brush.getSpacingPx());
    });
    subscribe(ID.PointerMove, _onMouseMove);
    subscribe(ID.PointerDrag, _onMouseDrag);
    subscribe(ID.PointerDown, _onMouseDown);
    subscribe(ID.PointerUp, _onMouseUp);
    subscribe(ID.ButtonToolBrush, function () {
        return useTool(Tools.Brush);
    });
    subscribe(ID.ButtonToolEraser, function () {
        return useTool(Tools.Eraser);
    });
    subscribe(ID.ButtonToolBlur, function () {
        return useTool(Tools.Blur);
    });
    useTool(getValue(ID$1.ToolId));
}
var frameCount = 0;
function animate() {
    var newPts = generateRandomPoints(rng, dotsPerFrame);
    dpp = dpp.concat(newPts);
    _render();
    if (frameCount < frames) {
        requestAnimationFrame(function () {
            return animate();
        });
        frameCount++;
    } else {
        renderingContext.layer = renderingContext.layerStack.stack[1];
        dpp = generateRandomPoints(rng, dotsPerFrame);
        _render();
    }
}
function createDrawPoint(data) {
    return new DrawPoint(data.positionData.position, getValue(ID$1.BrushSize), data.positionData.pressure, 0, brush.getColorRgba());
}
var _onMouseMove = function _onMouseMove(data) {};
var _onMouseDrag = function _onMouseDrag(data) {
    var point = createDrawPoint(data);
    var output = interpolator(point);
    dpp = dpp.concat(output);
    if (output.length > 0) {
        interpolator = interpGen(output[output.length - 1]);
    }
    render();
};
var _onMouseDown = function _onMouseDown(data) {
    var point = createDrawPoint(data);
    interpolator = interpGen(point);
    dpp = [point];
    render();
};
var _onMouseUp = function _onMouseUp(data) {
    render();
};
function render() {
    renderingCoordinator.requestRender();
}
var _render = function _render() {
    if (dpp.length > 0) {
        renderingContext.renderDrawPoints(dpp, brush.getTexture());
        dpp = [];
    }
};
function useBrush() {
    broadcast(ID.ButtonToolBrush, null);
}
function useEraser() {
    broadcast(ID.ButtonToolEraser, null);
}
function generateRandomPoints(rng, n) {
    var arr = [];
    var color = void 0;
    var x = void 0;
    var y = void 0;
    var scale = 1;
    var rotation = void 0;
    var size = 100;
    var drawPoint = void 0;
    for (var i = 0; i < n; i++) {
        x = rng.next() * 1000;
        y = rng.next() * 1000;
        color = generateColor(rng);
        rotation = rng.next() * Math.PI;
        drawPoint = new DrawPoint(Vec2.create(x, y), size, scale, rotation, color);
        arr.push(drawPoint);
    }
    return arr;
}
var colortest = 0;
function generateColor(rng) {
    var gamma = getValue(ID$1.Gamma);
    var h = void 0;
    var s = void 0;
    var v = void 0;
    var a = void 0;
    switch (colortest) {
        case 0:
            h = rng.next();
            s = .8 + .2 * rng.next();
            v = .7 + .3 * rng.next();
            a = .7 + .3 * rng.next();
            break;
        case 1:
            h = Date.now() % 1000 / 1000;
            s = .7;
            v = 1;
            a = getValue(ID$1.BrushDensity);
            break;
        case 2:
            h = getValue(ID$1.BrushHue);
            s = getValue(ID$1.BrushSaturation);
            v = getValue(ID$1.BrushValue);
            a = getValue(ID$1.BrushDensity);
            break;
        default:
            h = 0;
            s = 0;
            v = 0;
            a = 1;
            break;
    }
    return Hsva.create(h, s, v, a).toRgba().powScalar(gamma);
}
function useTool(tool) {
    switch (tool) {
        case Tools.Eraser:
            renderingContext.blendMode = BlendMode.Erase;
            break;
        case Tools.Brush:
        default:
            renderingContext.blendMode = BlendMode.Normal;
            break;
    }
    setValue(ID$1.ToolId, tool);
}
var brushHueSlider = void 0;
var brushSaturationSlider = void 0;
var brushValueSlider = void 0;
var brushDensitySlider = void 0;
var brushSoftnessSlider = void 0;
var brushSpacingSlider = void 0;
var brushSizeSlider = void 0;
function initSliders() {
    var args = {
        min: 0,
        max: 1,
        step: 0.0002,
        value: 0,
        precision: 4
    };
    var hueSliderEl = new SliderElement("hueSlider", "Hue", args);
    var satSliderEl = new SliderElement("saturationSlider", "Saturation", args);
    var valSliderEl = new SliderElement("valueSlider", "Value", args);
    var sofSliderEl = new SliderElement("softnessSlider", "Softness", args);
    args.min = 0.001;
    var denSliderEl = new SliderElement("densitySlider", "Density", args);
    var spaSliderEl = new SliderElement("spacingSlider", "Spacing", args);
    args.min = 1;
    args.max = 512;
    args.step = .1;
    args.precision = 1;
    var sizSliderEl = new SliderElement("sizeSlider", "Size", args);
    brushHueSlider = new SliderDoubleBinding(hueSliderEl, ID.BrushHue, ID$1.BrushHue);
    brushSaturationSlider = new SliderDoubleBinding(satSliderEl, ID.BrushSaturation, ID$1.BrushSaturation);
    brushValueSlider = new SliderDoubleBinding(valSliderEl, ID.BrushValue, ID$1.BrushValue);
    brushDensitySlider = new SliderDoubleBinding(denSliderEl, ID.BrushDensity, ID$1.BrushDensity);
    brushSoftnessSlider = new SliderDoubleBinding(sofSliderEl, ID.BrushSoftness, ID$1.BrushSoftness);
    brushSpacingSlider = new SliderDoubleBinding(spaSliderEl, ID.BrushSpacing, ID$1.BrushSpacing);
    brushSizeSlider = new SliderDoubleBinding(sizSliderEl, ID.BrushSize, ID$1.BrushSize);
}
var colorPickerArea = void 0;
function initColorPicker() {
    colorPickerArea = new ColorSelectionArea();
}
function main() {
    initSettingsValues();
    start();
    initSliders();
    initColorPicker();
    animate();
}
window.onload = main;

exports.DEFAULT_SETTINGS = DEFAULT_SETTINGS;
exports.dotsPerFrame = dotsPerFrame;
exports.frames = frames;
exports.initSettingsValues = initSettingsValues;
exports.start = start;
exports.animate = animate;
exports.useBrush = useBrush;
exports.useEraser = useEraser;

}((this.MyBundle = this.MyBundle || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
